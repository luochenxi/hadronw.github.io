<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人 blog 的升级、改版]]></title>
    <url>%2F2018%2F11-08%2F201811082109%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何不被套路？]]></title>
    <url>%2F2018%2F11-07%2F201811072101%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[听说你特别喜欢给人提建议？]]></title>
    <url>%2F2018%2F11-05%2F201811051943%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[邱岳的产品实战]]></title>
    <url>%2F2018%2F11-04%2F201811041943%2F</url>
    <content type="text"><![CDATA[由于极客时间中，专栏的阅读不方便，查找麻烦，于是收集了部分专栏目录，整理如下。可把网址收藏，需要的时候再打开阅读。 未完待续！ 开篇词 | 和自己较劲，一个产品经理的实战历程https://time.geekbang.org/column/article/11838 01 | 如何验证你的产品创意？https://time.geekbang.org/column/article/12104 02 | 如何锤炼你的产品创意https://time.geekbang.org/column/article/12140 03 | 要不要相信你的调查问卷https://time.geekbang.org/column/article/12445 04 | 用最少的资源给你的产品试试水https://time.geekbang.org/column/article/12576 05 | 如何快速利用 MVP 思想https://time.geekbang.org/column/article/12581 产品会客厅 | 千万级用户的产品是如何打造的？https://time.geekbang.org/column/article/12984 06 | 如何做好产品立项https://time.geekbang.org/column/article/13101 07 | 产品发布的那些坑儿https://time.geekbang.org/column/article/13170 产品会客厅 | 极客时间产品规划大揭秘https://time.geekbang.org/column/article/13440 08 | 产品增长越来越难，到底应该怎么办？https://time.geekbang.org/column/article/13612 09 | 产品增长的核心，究竟是什么？https://time.geekbang.org/column/article/13615 产品会客厅 | 没有项目管理经验，如何推动团队一起完成任务？https://time.geekbang.org/column/article/13985 10 | 你需要组建增长团队吗，应该如何组建呢？https://time.geekbang.org/column/article/14080 11 | 产品增长有哪些业务公式与关键指标？（上）https://time.geekbang.org/column/article/14101 产品会客厅 | 需求评审怎么做，如何区分什么是真的用户需求？https://time.geekbang.org/column/article/14580 12 | 产品增长有哪些业务公式与关键指标？（下）https://time.geekbang.org/column/article/14658 13 | 产品做增长的过程中，有哪些关键套路？https://time.geekbang.org/column/article/16659 产品会客厅 | 一次简洁并有效的产品分析需要怎么做？https://time.geekbang.org/column/article/17863 14 | 实战增长，我们要知道哪些事儿？https://time.geekbang.org/column/article/18082 15 | 增长执行时，需要哪些关键的能力?https://time.geekbang.org/column/article/22838 产品会客厅 | 从“分享有赏”案例讲起，如何做关键决策？https://time.geekbang.org/column/article/39691 16 | 当钩子靠不住时，如何提高用户留存？（上）https://time.geekbang.org/column/article/39800 17 | 当钩子靠不住时，如何提高用户留存？（下）https://time.geekbang.org/column/article/39810 产品会客厅 | 从案例出发，如何利用数据分析来验证新功能的效果？https://time.geekbang.org/column/article/40184 18 | 如何把你的新用户转化为忠实的长期用户？https://time.geekbang.org/column/article/40296 19 | 满眼尽是“病毒”“裂变”，到底什么是传播和获客的正确姿势？（上）https://time.geekbang.org/column/article/40309 产品会客厅 | 产品经理面试究竟考什么？https://time.geekbang.org/column/article/40590 20 | 满眼尽是“病毒”“裂变”，到底什么是传播和获客的正确姿势？（下）https://time.geekbang.org/column/article/40877 21 | 增长黑客的阴暗面https://time.geekbang.org/column/article/40880 产品会客厅 | 产品经理的职业发展，你在哪个阶段？https://time.geekbang.org/column/article/41180 22 | 产品经理需要具备哪些基本的数据能力和意识？https://time.geekbang.org/column/article/41253 23 | 突发式流量数据暴跌，产品经理应该如何应对？【分析篇】https://time.geekbang.org/column/article/41338 产品会客厅 | 在产品的获客与传播上，“极客时间”做了些什么？https://time.geekbang.org/column/article/41623 24 | 突发式流量数据暴跌，产品经理应该如何应对？【拆解篇】https://time.geekbang.org/column/article/41702 25 | 突发式流量数据暴跌，产品经理应该如何应对？【处理篇】https://time.geekbang.org/column/article/41709 产品会客厅 | 从流量型平台转到资源匮乏平台，如何应对业务变化？https://time.geekbang.org/column/article/42057 26 | 当收集数据的前后，我们应该做什么？https://time.geekbang.org/column/article/42162 27 | 从具体业务出发，如何利用数据辅助你的决策？https://time.geekbang.org/column/article/42505 产品会客厅 | 面向大众的通用型产品VS受众面少的垂直领域，二者如何博弈？（上）https://time.geekbang.org/column/article/42723 产品会客厅 | 面向大众的通用型产品VS受众面少的垂直领域，二者如何博弈？（下）https://time.geekbang.org/column/article/42875 28 | 那些数据不能告诉你的事儿：尽信“数”不如无“数”https://time.geekbang.org/column/article/44282 29 | 每个产品经理都要掌握的基本商业概念是什么？https://time.geekbang.org/column/article/64401]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法之美]]></title>
    <url>%2F2018%2F11-04%2F201811041941%2F</url>
    <content type="text"><![CDATA[由于极客时间中，专栏的阅读不方便，查找麻烦，于是收集了部分专栏目录，整理如下。可把网址收藏，需要的时候再打开阅读。 未完待续！ 开篇词 | 从今天起，跨过“数据结构与算法”这道坎https://time.geekbang.org/column/article/39922 01 | 为什么要学习数据结构和算法？https://time.geekbang.org/column/article/39972 02 | 如何抓住重点，系统高效地学习数据结构与算法？https://time.geekbang.org/column/article/40011 03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？https://time.geekbang.org/column/article/40036 04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度https://time.geekbang.org/column/article/40447 不定期的周末福利第一期 | 数据结构与算法学习书单https://time.geekbang.org/column/article/40681 05 | 数组：为什么很多编程语言中数组都从0开始编号？https://time.geekbang.org/column/article/40961 06 | 链表（上）：如何实现LRU缓存淘汰算法?https://time.geekbang.org/column/article/41013 07 | 链表（下）：如何轻松写出正确的链表代码？https://time.geekbang.org/column/article/41149 08 | 栈：如何实现浏览器的前进和后退功能？https://time.geekbang.org/column/article/41222 09 | 队列：队列在线程池等有限资源池中的应用https://time.geekbang.org/column/article/41330 10 | 递归：如何用三行代码找到“最终推荐人”？https://time.geekbang.org/column/article/41440 11 | 排序（上）：为什么插入排序比冒泡排序更受欢迎？https://time.geekbang.org/column/article/41802 12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？https://time.geekbang.org/column/article/41913 13 | 线性排序：如何根据年龄给100万用户数据排序？https://time.geekbang.org/column/article/42038 14 | 排序优化：如何实现一个通用的、高性能的排序函数？https://time.geekbang.org/column/article/42359 15 | 二分查找（上）：如何用最省内存的方式实现快速查找功能？https://time.geekbang.org/column/article/42520 16 | 二分查找（下）：如何快速定位IP对应的省份地址？https://time.geekbang.org/column/article/42733 17 | 跳表：为什么Redis一定要用跳表来实现有序集合？https://time.geekbang.org/column/article/42896 18 | 散列表（上）：Word文档中的单词拼写检查功能是如何实现的？https://time.geekbang.org/column/article/64233 19 | 散列表（中）：如何打造一个工业级水平的散列表？https://time.geekbang.org/column/article/64586]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十五分钟爬取极客专栏目录 | 无需任何代码]]></title>
    <url>%2F2018%2F11-03%2F201811032200%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[极客专栏（部分） | 目录大全]]></title>
    <url>%2F2018%2F11-03%2F201811031807%2F</url>
    <content type="text"><![CDATA[由于极客时间中，专栏的阅读不方便，查找麻烦，于是收集了部分专栏目录，整理如下。可把网址收藏，需要的时候再打开阅读。 极客时间专栏：左耳听风左耳听风 | 专栏目录 极客时间专栏：技术与商业案例解读技术与商业案例解读 | 专栏目录 极客时间专栏：Java核心技术36讲Java核心技术36讲 | 专栏目录 极客时间专栏：推荐系统三十六式推荐系统三十六式 | 专栏目录 极客时间专栏：邱岳的产品实战邱岳的产品实战 | 专栏目录 极客时间专栏：数据结构与算法之美数据结构与算法之美 | 专栏目录]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐系统三十六式 | 专栏目录]]></title>
    <url>%2F2018%2F11-03%2F201811031805%2F</url>
    <content type="text"><![CDATA[专栏详情，用微信扫描下方海报中二维码即可获得！（注：文末有福利） 专栏目录00 开篇词 | 用知识去对抗技术不平等https://time.geekbang.org/column/article/3599 01【概念篇】你真的需要个性化推荐系统吗?https://time.geekbang.org/column/article/4318 02 【概念篇】个性化推荐系统那些绕不开的经典问题https://time.geekbang.org/column/article/4340 03 【概念篇】这些你必须应该具备的思维模式https://time.geekbang.org/column/article/4417 04 【内容推荐】画鬼容易画人难：用户画像的“能”和“不能”https://time.geekbang.org/column/article/4574 05 【内容推荐】从文本到用户画像有多远https://time.geekbang.org/column/article/4635 06 【内容推荐】超越标签的内容推荐系统https://time.geekbang.org/column/article/4674 07 【近邻推荐】人以群分，你是什么人就看到什么世界https://time.geekbang.org/column/article/4802 08 【近邻推荐】解密“看了又看”和“买了又买”https://time.geekbang.org/column/article/4856 09 【近邻推荐】协同过滤中的相似度计算方法有哪些https://time.geekbang.org/column/article/4859 10 【矩阵分解】那些在Netflix Prize中大放异彩的推荐算法https://time.geekbang.org/column/article/5030 11 【矩阵分解】Facebook是怎么为十亿人互相推荐好友的https://time.geekbang.org/column/article/5033 12【矩阵分解】如果关注排序效果，那么这个模型可以帮到你https://time.geekbang.org/column/article/5055 13 【模型融合】经典模型融合办法：线性模型和树模型的组合拳https://time.geekbang.org/column/article/5365 14 【模型融合】一网打尽协同过滤、矩阵分解和线性模型https://time.geekbang.org/column/article/5387 15 【模型融合】深度和宽度兼具的融合模型 Wide and Deephttps://time.geekbang.org/column/article/5406 16 【MAB问题】简单却有效的Bandit算法https://time.geekbang.org/column/article/5594 17 【MAB问题】结合上下文信息的Bandit算法https://time.geekbang.org/column/article/5607 18 【MAB问题】如何将Bandit算法与协同过滤结合使用https://time.geekbang.org/column/article/5610 19 【深度学习】深度学习在推荐系统中的应用有哪些?https://time.geekbang.org/column/article/5843 20 【深度学习】用RNN构建个性化音乐播单https://time.geekbang.org/column/article/5916 21 【其他应用算法】构建一个科学的排行榜体系https://time.geekbang.org/column/article/5933 22 【其他应用算法】实用的加权采样算法https://time.geekbang.org/column/article/6177 23 【其他应用算法】推荐候选池的去重策略https://time.geekbang.org/column/article/6186 24 【常见架构】典型的信息流架构是什么样的https://time.geekbang.org/column/article/6195 25 【常见架构】Netflix个性化推荐架构https://time.geekbang.org/column/article/6495 26 【常见架构】总览推荐架构和搜索、广告的关系https://time.geekbang.org/column/article/6499 27 【关键模块】巧妇难为无米之炊：数据采集关键要素https://time.geekbang.org/column/article/6506 28 【关键模块】让你的推荐系统反应更快：实时推荐https://time.geekbang.org/column/article/6630 29 【关键模块】让数据驱动落地，你需要一个实验平台https://time.geekbang.org/column/article/6799 30 【关键模块】 推荐系统服务化、存储选型及API设计https://time.geekbang.org/column/article/6803 31 【效果保证】推荐系统的测试方法及常用指标介绍https://time.geekbang.org/column/article/7181 32 【效果保证】道高一尺魔高一丈：推荐系统的攻防https://time.geekbang.org/column/article/7188 33 【开源工具】和推荐系统有关的开源工具及框架介绍https://time.geekbang.org/column/article/7204 34 【产品篇】推荐系统在互联网产品商业链条中的地位https://time.geekbang.org/column/article/7623 35 【产品篇】说说信息流的前世今生https://time.geekbang.org/column/article/7653 36 【团队篇】组建推荐团队及工程师的学习路径https://time.geekbang.org/column/article/7657 37 推荐系统的参考阅读https://time.geekbang.org/column/article/8113 38 【尾声】遇“荐”之后，江湖再见https://time.geekbang.org/column/article/8117 通过下方连接购买的极客专栏，可获得赏金 80% 的现金返现 福利 | 购买极客时间课程大返现]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java核心技术36讲 | 专栏目录]]></title>
    <url>%2F2018%2F11-03%2F201811031759%2F</url>
    <content type="text"><![CDATA[专栏详情，用微信扫描下方海报中二维码即可获得！（注：文末有福利） 专栏目录00 开篇词 | 以面试题为切入点，有效提升你的Java内功https://time.geekbang.org/column/article/6478 01 第1讲 | 谈谈你对Java平台的理解？https://time.geekbang.org/column/article/6845 02 第2讲 | Exception和Error有什么区别？https://time.geekbang.org/column/article/6849 03 第3讲 | 谈谈final、finally、 finalize有什么不同？https://time.geekbang.org/column/article/6906 04 第4讲 | 强引用、软引用、弱引用、幻象引用有什么区别？https://time.geekbang.org/column/article/6970 05 第5讲 | String、StringBuffer、StringBuilder有什么区别？https://time.geekbang.org/column/article/7349 06 第6讲 | 动态代理是基于什么原理？https://time.geekbang.org/column/article/7489 07 第7讲 | int和Integer有什么区别？https://time.geekbang.org/column/article/7514 08 第8讲 | 对比Vector、ArrayList、LinkedList有何区别？https://time.geekbang.org/column/article/7810 09 第9讲 | 对比Hashtable、HashMap、TreeMap有什么不同？https://time.geekbang.org/column/article/8053 10 第10讲 | 如何保证集合是线程安全的?https://time.geekbang.org/column/article/8137 11 第11讲 | Java提供了哪些IO方式？ NIO如何实现多路复用？https://time.geekbang.org/column/article/8369 12 第12讲 | Java有几种文件拷贝方式？哪一种最高效？https://time.geekbang.org/column/article/8393 13 第13讲 | 谈谈接口和抽象类有什么区别？https://time.geekbang.org/column/article/8471 14 第14讲 | 谈谈你知道的设计模式？https://time.geekbang.org/column/article/8624 15 第15讲 | synchronized和ReentrantLock有什么区别呢？https://time.geekbang.org/column/article/8799 周末福利 | 谈谈我对Java学习和面试的看法https://time.geekbang.org/column/article/9014 16 第16讲 | synchronized底层如何实现？什么是锁的升级、降级？https://time.geekbang.org/column/article/9042 17 第17讲 | 一个线程两次调用start()方法会出现什么情况？https://time.geekbang.org/column/article/9103 18 第18讲 | 什么情况下Java程序会产生死锁？如何定位、修复？https://time.geekbang.org/column/article/9266 19 第19讲 | Java并发包提供了哪些并发工具类？https://time.geekbang.org/column/article/9373 20 第20讲 | 并发包中的ConcurrentLinkedQueue和LinkedBlockingQueue有什么区别？https://time.geekbang.org/column/article/9588 21 第21讲 | Java并发类库提供的线程池有哪几种？ 分别有什么特点？https://time.geekbang.org/column/article/9712 22 第22讲 | AtomicInteger底层实现原理是什么？如何在自己的产品代码中应用CAS操作？https://time.geekbang.org/column/article/9788 23 第23讲 | 请介绍类加载过程，什么是双亲委派模型？https://time.geekbang.org/column/article/9946 24 第24讲 | 有哪些方法可以在运行时动态生成一个Java类？https://time.geekbang.org/column/article/10076 25 第25讲 | 谈谈JVM内存区域的划分，哪些区域可能发生OutOfMemoryError?https://time.geekbang.org/column/article/10192 26 第26讲 | 如何监控和诊断JVM堆内和堆外内存使用？https://time.geekbang.org/column/article/10325 27 第27讲 | Java常见的垃圾收集器有哪些？https://time.geekbang.org/column/article/10513 28 第28讲 | 谈谈你的GC调优思路?https://time.geekbang.org/column/article/10651 29 第29讲 | Java内存模型中的happen-before是什么？https://time.geekbang.org/column/article/10772 30 第30讲 | Java程序运行在Docker等容器环境有哪些新问题？https://time.geekbang.org/column/article/10975 31 第31讲 | 你了解Java应用开发中的注入攻击吗？https://time.geekbang.org/column/article/11211 32 第32讲 | 如何写出安全的Java代码？https://time.geekbang.org/column/article/11355 33 第33讲 | 后台服务出现明显“变慢”，谈谈你的诊断思路？https://time.geekbang.org/column/article/11651 34 第34讲 | 有人说“Lambda能让Java程序慢30倍”，你怎么看？https://time.geekbang.org/column/article/11824 35 第35讲 | JVM优化Java代码时都做了什么？https://time.geekbang.org/column/article/12003 周末福利 | 一份Java工程师必读书单https://time.geekbang.org/column/article/12188 36 第36讲 | 谈谈MySQL支持的事务隔离级别，以及悲观锁和乐观锁的原理和应用场景？https://time.geekbang.org/column/article/12288 37 第37讲 | 谈谈Spring Bean的生命周期和作用域？https://time.geekbang.org/column/article/12472 38 第38讲 | 对比Java标准NIO类库，你知道Netty是如何实现更高性能的吗？https://time.geekbang.org/column/article/12629 39 第39讲 | 谈谈常用的分布式ID的设计方案？Snowflake是否受冬令时切换影响？https://time.geekbang.org/column/article/12806 结束语 | 技术没有终点https://time.geekbang.org/column/article/12963 通过下方连接购买的极客专栏，可获得赏金 80% 的现金返现 福利 | 购买极客时间课程大返现]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术与商业案例解读 | 专栏目录]]></title>
    <url>%2F2018%2F11-03%2F201811031718%2F</url>
    <content type="text"><![CDATA[专栏详情，用微信扫描下方海报中二维码即可获得！（注：文末有福利） 专栏目录一键直达 | 系列解读文章回顾https://time.geekbang.org/column/article/40949 开篇词 | 突破技术思维，站在商业的角度看问题https://time.geekbang.org/column/article/49 001 | 西雅图IT公司之RealNetworks：一个帝国的兴衰（上）https://time.geekbang.org/column/article/34 002 | 西雅图IT公司之RealNetworks：一个帝国的兴衰（下）https://time.geekbang.org/column/article/39 003 | 以RealNetworks为例，谈谈初创公司如何应对巨头碾压https://time.geekbang.org/column/article/314 004 | 文档数据库的缔造者MongoDB（上）https://time.geekbang.org/column/article/321 005 | 文档数据库的缔造者MongoDB（下）https://time.geekbang.org/column/article/326 006 | 以MongoDB为例，看基础架构类产品创业https://time.geekbang.org/column/article/333 007 | 直面MongoDB，谈微软的NoSQL战略https://time.geekbang.org/column/article/401 008 | 免费还是收费？WinRAR的生意经https://time.geekbang.org/column/article/412 009 | 可视化分析鼻祖Tableauhttps://time.geekbang.org/column/article/415 010 | 从Tableau上市，看学术界和工业界人士创业https://time.geekbang.org/column/article/473 011 | 周鸿祎和BAT的沉浮录（上）https://time.geekbang.org/column/article/475 012 | 周鸿祎和BAT的沉浮录（中）https://time.geekbang.org/column/article/544 013 | 周鸿祎和BAT的沉浮录（下）https://time.geekbang.org/column/article/546 014 | 周鸿祎和BAT的沉浮录（后记）https://time.geekbang.org/column/article/556 015 | 在线旅游帝国Expedia崛起的背后https://time.geekbang.org/column/article/557 016 | 亚马逊领导力准则之要有硬骨头https://time.geekbang.org/column/article/619 017 | Hadoop三国之魏国Clouderahttps://time.geekbang.org/column/article/620 018 | Hadoop三国之吴国MapRhttps://time.geekbang.org/column/article/622 019 | Hadoop三国之蜀国Hortonworkshttps://time.geekbang.org/column/article/623 020 | Hadoop及其发行商的未来https://time.geekbang.org/column/article/624 021 | 彼得 · 蒂尔的投资人生https://time.geekbang.org/column/article/901 022 | 商业之外的彼得 · 蒂尔https://time.geekbang.org/column/article/903 023 | 创业的智慧：从彼得·蒂尔的创投哲学说起https://time.geekbang.org/column/article/917 024 | 房产经纪的颠覆者Redfin：在“传统”与“现代”间徘徊https://time.geekbang.org/column/article/1047 025 | 房产经纪的“协作者”Zillow：一个地产数据平台https://time.geekbang.org/column/article/1048 026 | 颠覆还是协作，房地产市场上Redfin和Zillow的抉择https://time.geekbang.org/column/article/1049 027 | 应用交付网络大厂F5：“一招鲜”之殇https://time.geekbang.org/column/article/1282 028 | 在线差旅报销鼻祖Concur：在转型中获得发展https://time.geekbang.org/column/article/1288 029 | 漫谈企业转型：在市场变迁中寻找生机https://time.geekbang.org/column/article/1289 030 | 克雷公司沉浮录：行走在超级计算机市场https://time.geekbang.org/column/article/1395 031 | “单一化”的隐忧：从克雷公司看“一条腿走路”https://time.geekbang.org/column/article/1532 032 | 亚马逊领导力准则之决策正确https://time.geekbang.org/column/article/1571 033 | Halo的开发者Bungie：与微软的聚散https://time.geekbang.org/column/article/1574 034 | “卖身”须谨慎：创业公司面临的抉择https://time.geekbang.org/column/article/1575 035 | 亚马逊领导力准则之客户至尚https://time.geekbang.org/column/article/1803 036 | 智能音箱的战斗：亚马逊的硬件路https://time.geekbang.org/column/article/1875 037 | 智能音箱的战斗：Echo攻城略地https://time.geekbang.org/column/article/1876 038 | 智能音箱的战斗：语音助手Alexahttps://time.geekbang.org/column/article/1877 039 | 智能音箱的战斗：谷歌的杀入https://time.geekbang.org/column/article/1878 040 | 智能音箱的战斗：亚马逊的战略布局https://time.geekbang.org/column/article/1879 041 | 智能音箱的战斗：巨头纷纷入场https://time.geekbang.org/column/article/1880 042 | 智能音箱的战斗：白马非马https://time.geekbang.org/column/article/1881 043 | 如何透过一个领域去联合分析多家企业？https://time.geekbang.org/column/article/2328 044 | 谷歌的创新精神：好的、坏的和丑陋的（上）https://time.geekbang.org/column/article/2329 045 | 谷歌的创新精神：好的、坏的和丑陋的（下）https://time.geekbang.org/column/article/2449 046 | 仁科：被迫再创业的David Duffieldhttps://time.geekbang.org/column/article/2515 047 | 仁科：飞跃发展的企业级软件帝国https://time.geekbang.org/column/article/2604 048 | 仁科：收购和被收购https://time.geekbang.org/column/article/2606 049 | 仁科的成与败https://time.geekbang.org/column/article/2608 050 | 亚马逊领导力准则之勤俭节约https://time.geekbang.org/column/article/2693 051 | WorkDay：杜菲尔德复仇记https://time.geekbang.org/column/article/2840 052 | David Duffield的眼界和成败https://time.geekbang.org/column/article/2900 053 | 分析企业的两要素：远见和执行力https://time.geekbang.org/column/article/3206 054 | 互联网第一股雅虎的兴衰：霸主的诞生https://time.geekbang.org/column/article/3208 055 | 互联网第一股雅虎的兴衰：运气不敌技术https://time.geekbang.org/column/article/3421 056 | 互联网第一股雅虎的兴衰：没有救世主https://time.geekbang.org/column/article/3618 057 | 成也杨致远，败也杨致远https://time.geekbang.org/column/article/3640 058 | 企业因人成事，领导人很重要https://time.geekbang.org/column/article/3642 059 | 亚马逊领导力准则之主人翁精神https://time.geekbang.org/column/article/3674 060 | 半条命的Dota帝国Valve：半条命https://time.geekbang.org/column/article/3675 061 | 半条命的Dota帝国Valve：Steam平台https://time.geekbang.org/column/article/3676 062 | 半条命的Dota帝国Valve：Dota 2https://time.geekbang.org/column/article/3677 063 | 半条命的Dota帝国Valve：无领导管理https://time.geekbang.org/column/article/3678 064 | 半条命的Dota帝国Valve：虚拟现实https://time.geekbang.org/column/article/3679 065 | Gabe Newell：Valve帝国制度的利弊https://time.geekbang.org/column/article/4209 066 | 管中窥豹之从面试看企业文化：微软https://time.geekbang.org/column/article/4321 067 | 管中窥豹之从面试看企业文化：亚马逊https://time.geekbang.org/column/article/4339 068 | 管中窥豹之从面试看企业文化：谷歌https://time.geekbang.org/column/article/4344 069 | 管中窥豹之从面试看企业文化：甲骨文https://time.geekbang.org/column/article/4346 070 | 管中窥豹之从面试看企业文化：Facebookhttps://time.geekbang.org/column/article/4351 071 | 透过企业用人之道看企业发展https://time.geekbang.org/column/article/4477 072 | Zenefits：一个卖保险的创业公司https://time.geekbang.org/column/article/4772 073 | Glassdoor：让公司信息对个人透明https://time.geekbang.org/column/article/4896 074 | 从巴顿的创业史看巴顿https://time.geekbang.org/column/article/4897 075 | 办公软件的战斗：开篇https://time.geekbang.org/column/article/4999 076 | VisiCalc：第一个电子表格软件的诞生https://time.geekbang.org/column/article/5094 077 | 亚马逊领导力准则之选贤育能https://time.geekbang.org/column/article/5196 078 | WordStar：第一个字处理软件的故事https://time.geekbang.org/column/article/5349 079 | 微软：办公软件战场的螳螂https://time.geekbang.org/column/article/5524 080 | 亚马逊领导力准则之最高标准https://time.geekbang.org/column/article/5572 081 | WordPerfect：字处理软件的新秀https://time.geekbang.org/column/article/5635 082 | Lotus 1-2-3：莲花公司的电子表格帝国https://time.geekbang.org/column/article/5711 083 | 亚马逊领导力准则之创新简化https://time.geekbang.org/column/article/5722 084 | 红狮会战：微软的反击https://time.geekbang.org/column/article/5826 085 | 大杀器Lotus Notes 和被收购的莲花公司https://time.geekbang.org/column/article/6053 086 | 亚马逊领导力准则之崇尚行动https://time.geekbang.org/column/article/6179 087 | 无敌寂寞的微软之为创新而创新https://time.geekbang.org/column/article/6185 088 | 办公软件的新时代：微软和谷歌的战斗https://time.geekbang.org/column/article/6333 089 | 亚马逊领导力准则之远见卓识https://time.geekbang.org/column/article/6337 090 | 异军突起的Slackhttps://time.geekbang.org/column/article/6534 091 | 办公软件战斗的启示：内忧总是强于外患https://time.geekbang.org/column/article/6542 092 | 亚马逊领导力准则之好奇求知与赢得信任https://time.geekbang.org/column/article/6760 093 | 办公软件战斗的启示：敌人的出现常常出其不意https://time.geekbang.org/column/article/6764 094 | 亚马逊领导力准则之刨根问底与达成业绩https://time.geekbang.org/column/article/6984 095 | 谷歌的大数据路：从“三驾马车”到一无所有https://time.geekbang.org/column/article/7140 096 | 谷歌的大数据路：一场影响深远的论战https://time.geekbang.org/column/article/7291 097 | 谷歌的大数据路：谷歌的“黑科技”https://time.geekbang.org/column/article/7487 098 | 如何读懂类似谷歌“三驾马车”这样的技术论文？https://time.geekbang.org/column/article/7493 099 | 雅虎：大数据领域的“活雷锋”https://time.geekbang.org/column/article/7705 100 | IBM的大数据路之起早贪黑赶了晚集https://time.geekbang.org/column/article/7964 101 | 社交公司们的大数据贡献https://time.geekbang.org/column/article/7965 102 | 微软的大数据发展史：微软硅谷研究院https://time.geekbang.org/column/article/8211 103 | 微软的大数据发展史：必应的Cosmoshttps://time.geekbang.org/column/article/8212 104 | 微软的大数据发展史：Azure的大数据发展https://time.geekbang.org/column/article/8468 105 | 亚马逊的大数据故事：从先驱者到插管吸血开源https://time.geekbang.org/column/article/8570 106 | 亚马逊的大数据故事：创新和拿来并存的云服务https://time.geekbang.org/column/article/8747 107 | 阿里巴巴的大数据故事：数据分析平台发展史 https://time.geekbang.org/column/article/8770 108 | 阿里巴巴的大数据故事：流计算引擎发展史https://time.geekbang.org/column/article/9015 109 | 大公司的大数据战略得失：自建轮子成本高https://time.geekbang.org/column/article/9017 110 | 大公司的大数据战略得失：抱团取暖难敌插管吸血者https://time.geekbang.org/column/article/9019 111 | Palantir：神秘的大数据独角兽https://time.geekbang.org/column/article/9327 112 | Splunk：机器大数据的分析帝国https://time.geekbang.org/column/article/9328 113 | Confluent：在Kafka上飞驰的数据交换者https://time.geekbang.org/column/article/2412 114 | Powerset：HBase的老东家https://time.geekbang.org/column/article/9329 115 | Cassandra和DataStax的故事https://time.geekbang.org/column/article/9889 116 | Databricks之Spark的数据金砖王国https://time.geekbang.org/column/article/10041 117 | Data Artisans：浴火重生的新一代大数据计算引擎Flinkhttps://time.geekbang.org/column/article/10052 118 | Dremio:在Drill和Arrow上的大数据公司https://time.geekbang.org/column/article/10054 119 | Imply：基于Druid的大数据分析公司https://time.geekbang.org/column/article/10056 120 | Kyligence：阿帕奇麒麟背后的大数据公司https://time.geekbang.org/column/article/10058 121 | Snowflake:云端的弹性数据仓库https://time.geekbang.org/column/article/10059 122 | TiDB：一个国产新数据库的创业故事https://time.geekbang.org/column/article/10942 123 | 大数据创业公司的前景：红海创业多艰辛https://time.geekbang.org/column/article/10945 124 | 如何通过企业技术积累去分析一家企业？https://time.geekbang.org/column/article/10946 125 | Facebook的黑客精神https://time.geekbang.org/column/article/10947 126 | Twitter：蓝色小鸟还能飞多久（上）https://time.geekbang.org/column/article/10953 127 | Twitter：蓝色小鸟还能飞多久（下）https://time.geekbang.org/column/article/10958 128 | 赚钱是根本，换CEO也没救https://time.geekbang.org/column/article/10959 129 | Square：手机POS机和比特币交易https://time.geekbang.org/column/article/10960 130 | 创意很重要，但不是一切https://time.geekbang.org/column/article/12344 131 | 杰克·多西：分身有术之兼任两家上市公司CEOhttps://time.geekbang.org/column/article/12355 132 | Groupon：团购鼻祖的兴衰https://time.geekbang.org/column/article/12356 133 | 卖掉自己是不是更好https://time.geekbang.org/column/article/12357 134 | 企业在线存储Boxhttps://time.geekbang.org/column/article/12360 135 | 个人在线存储 Dropboxhttps://time.geekbang.org/column/article/12368 136 | 做产品先做消费者市场，还是先做企业市场https://time.geekbang.org/column/article/12369 137 | 今天我们都来Pin图片之Pinterest的图片社交路https://time.geekbang.org/column/article/12370 138 | 企业不上市为哪般https://time.geekbang.org/column/article/12371 139 | 微软的综合工程师改革https://time.geekbang.org/column/article/13802 140 | SaaS先驱Salesforcehttps://time.geekbang.org/column/article/13803 141 | 太超前好不好https://time.geekbang.org/column/article/13813 142 | Sun：太阳的升起https://time.geekbang.org/column/article/14346 143 | Sun：太阳的陨落https://time.geekbang.org/column/article/14347 144 | 看错敌人多可怕https://time.geekbang.org/column/article/14348 145 | SAP的HANA战略（上）https://time.geekbang.org/column/article/16617 146 | SAP的HANA战略（下）https://time.geekbang.org/column/article/16625 147 | 成功的忽悠加成功的执行等于成功的产品https://time.geekbang.org/column/article/16640 148 | SQL Server发展史https://time.geekbang.org/column/article/16656 149 | 眼光决定一切https://time.geekbang.org/column/article/16665 150 | Ashton-Tate：桌面数据库王者的兴衰https://time.geekbang.org/column/article/16682 151 | 无敌不可以肆意妄为https://time.geekbang.org/column/article/16691 152 | Reddit：天涯论坛美国版https://time.geekbang.org/column/article/16700 153 | Hacker News：创业社交两不误https://time.geekbang.org/column/article/16722 154 | Y Combinator：孵化器还是培训班？https://time.geekbang.org/column/article/40503 155 | 创业公司进孵化器真的值得吗？https://time.geekbang.org/column/article/40535 156 | Paul Graham：硅谷创业教父https://time.geekbang.org/column/article/40536 157 | Zynga：发家从农场开始https://time.geekbang.org/column/article/40537 158 | 论Zynga的倒台https://time.geekbang.org/column/article/40538 159 | 企业分析要求综合素质https://time.geekbang.org/column/article/40539 结束语 | 积跬步，而终至千里https://time.geekbang.org/column/article/40936 通过下方连接购买的极客专栏，可获得赏金 80% 的现金返现 福利 | 购买极客时间课程大返现]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左耳听风 | 专栏目录]]></title>
    <url>%2F2018%2F11-03%2F201811031716%2F</url>
    <content type="text"><![CDATA[专栏详情，用微信扫描下方海报中二维码即可获得！（注：文末有福利） 专栏目录开篇词 | 洞悉技术的本质，享受科技的乐趣https://time.geekbang.org/column/article/181 01 | 程序员如何用技术变现（上）https://time.geekbang.org/column/article/183 02 | 程序员如何用技术变现（下）https://time.geekbang.org/column/article/185 03 | Equifax信息泄露始末https://time.geekbang.org/column/article/281 04 | 从Equifax信息泄露看数据安全https://time.geekbang.org/column/article/285 05 | 何为技术领导力https://time.geekbang.org/column/article/288 06 | 如何拥有技术领导力https://time.geekbang.org/column/article/291 07 | 推荐阅读：每个程序员都该知道的事https://time.geekbang.org/column/article/471 08 | Go语言，Docker和新技术https://time.geekbang.org/column/article/294 09 | 答疑解惑：渴望、热情和选择https://time.geekbang.org/column/article/540 10 | 如何成为一个大家愿意追随的Leader？https://time.geekbang.org/column/article/297 11 | 程序中的错误处理：错误返回码和异常捕捉https://time.geekbang.org/column/article/675 12 | 程序中的错误处理：异步编程和最佳实践https://time.geekbang.org/column/article/693 13 | 魔数 0x5f3759dfhttps://time.geekbang.org/column/article/730 14 | 推荐阅读：机器学习101https://time.geekbang.org/column/article/862 15 | 时间管理：同扭曲时间的事儿抗争https://time.geekbang.org/column/article/995 16 | 时间管理：投资赚取时间https://time.geekbang.org/column/article/997 17 | 故障处理最佳实践：应对故障https://time.geekbang.org/column/article/1059 18 | 故障处理最佳实践：故障改进https://time.geekbang.org/column/article/1064 19 | 答疑解惑：我们应该能够识别的表象和本质https://time.geekbang.org/column/article/865 20 | Git协同工作流，你该怎样选https://time.geekbang.org/column/article/2440 21 | 分布式系统架构的冰与火https://time.geekbang.org/column/article/1411 22 | 从亚马逊的实践，谈分布式系统的难点https://time.geekbang.org/column/article/1505 23 | 分布式系统的技术栈https://time.geekbang.org/column/article/1512 24 | 分布式系统关键技术：全栈监控https://time.geekbang.org/column/article/1513 25 | 分布式系统关键技术：服务调度https://time.geekbang.org/column/article/1604 26 | 分布式系统关键技术：流量与数据调度https://time.geekbang.org/column/article/1609 27 | 洞悉PaaS平台的本质https://time.geekbang.org/column/article/1610 28 | 推荐阅读：分布式系统架构经典资料https://time.geekbang.org/column/article/2080 29 | 推荐阅读：分布式数据调度相关论文https://time.geekbang.org/column/article/2421 30 | 编程范式游记（1）- 起源https://time.geekbang.org/column/article/301 31 | 编程范式游记（2）- 泛型编程https://time.geekbang.org/column/article/303 32 | 编程范式游记（3） - 类型系统和泛型的本质https://time.geekbang.org/column/article/2017 33 | 编程范式游记（4）- 函数式编程https://time.geekbang.org/column/article/2711 34 | 编程范式游记（5）- 修饰器模式https://time.geekbang.org/column/article/2723 35 | 编程范式游记（6）- 面向对象编程https://time.geekbang.org/column/article/2729 36 | 编程范式游记（7）- 基于原型的编程范式https://time.geekbang.org/column/article/2741 37 | 编程范式游记（8）- Go 语言的委托模式https://time.geekbang.org/column/article/2748 38 | 编程范式游记（9）- 编程的本质https://time.geekbang.org/column/article/2751 39 | 编程范式游记（10）- 逻辑编程范式https://time.geekbang.org/column/article/2752 40 | 编程范式游记（11）- 程序世界里的编程范式https://time.geekbang.org/column/article/2754 41 | 弹力设计篇之“认识故障和弹力设计”https://time.geekbang.org/column/article/3912 42 | 弹力设计篇之“隔离设计”https://time.geekbang.org/column/article/3917 43 | 弹力设计篇之“异步通讯设计”https://time.geekbang.org/column/article/3926 44 | 弹力设计篇之“幂等性设计”https://time.geekbang.org/column/article/4050 45 | 弹力设计篇之“服务的状态”https://time.geekbang.org/column/article/4086 46 | 弹力设计篇之“补偿事务”https://time.geekbang.org/column/article/4087 47 | 弹力设计篇之“重试设计”https://time.geekbang.org/column/article/4121 48 | 弹力设计篇之“熔断设计”https://time.geekbang.org/column/article/4241 49 | 弹力设计篇之“限流设计”https://time.geekbang.org/column/article/4245 50 | 弹力设计篇之“降级设计”https://time.geekbang.org/column/article/4252 51 | 弹力设计篇之“弹力设计总结”https://time.geekbang.org/column/article/4253 52 | 管理设计篇之“分布式锁”https://time.geekbang.org/column/article/5175 53 | 管理设计篇之“配置中心”https://time.geekbang.org/column/article/5819 54 | 管理设计篇之“边车模式”https://time.geekbang.org/column/article/5909 55 | 管理设计篇之“服务网格”https://time.geekbang.org/column/article/5920 56 | 管理设计篇之“网关模式”https://time.geekbang.org/column/article/6086 57 | 管理设计篇之“部署升级策略”https://time.geekbang.org/column/article/6283 58 | 性能设计篇之“缓存”https://time.geekbang.org/column/article/6282 59 | 性能设计篇之“异步处理”https://time.geekbang.org/column/article/7036 60 | 性能设计篇之“数据库扩展”https://time.geekbang.org/column/article/7045 61 | 性能设计篇之“秒杀”https://time.geekbang.org/column/article/7047 62 | 性能设计篇之“边缘计算”https://time.geekbang.org/column/article/7086 63 | 区块链技术 - 区块链的革命性及技术概要https://time.geekbang.org/column/article/5197 64 | 区块链技术 - 区块链技术细节 - 哈希算法https://time.geekbang.org/column/article/5363 65 | 区块链技术 - 区块链技术细节 - 加密和挖矿https://time.geekbang.org/column/article/5438 66 | 区块链技术 - 去中心化的共识机制https://time.geekbang.org/column/article/5612 67 | 区块链技术 - 智能合约https://time.geekbang.org/column/article/5623 68 | 区块链技术 - 传统金融和虚拟货币https://time.geekbang.org/column/article/5636 69 | 程序员练级攻略（2018）：开篇词https://time.geekbang.org/column/article/8136 70 | 程序员练级攻略（2018）：零基础启蒙https://time.geekbang.org/column/article/8216 71 | 程序员练级攻略（2018）：正式入门https://time.geekbang.org/column/article/8217 72 | 程序员练级攻略（2018）：程序员修养https://time.geekbang.org/column/article/8700 73 | 程序员练级攻略（2018）：编程语言https://time.geekbang.org/column/article/8701 74 | 程序员练级攻略（2018）：理论学科https://time.geekbang.org/column/article/8887 75 | 程序员练级攻略（2018）：系统知识https://time.geekbang.org/column/article/8888 76 | 程序员练级攻略（2018）：软件设计https://time.geekbang.org/column/article/9369 77 | 程序员练级攻略（2018）：Linux系统、内存和网络https://time.geekbang.org/column/article/9759 78 | 程序员练级攻略（2018）：异步I/O模型和Lock-Free编程https://time.geekbang.org/column/article/9851 79 | 程序员练级攻略（2018）：Java底层知识https://time.geekbang.org/column/article/10216 80 | 程序员练级攻略（2018）：数据库https://time.geekbang.org/column/article/10301 81 | 程序员练级攻略（2018）：分布式架构入门https://time.geekbang.org/column/article/10603 82 | 程序员练级攻略（2018）：分布式架构经典图书和论文https://time.geekbang.org/column/article/10604 83 | 程序员练级攻略（2018）：分布式架构工程设计https://time.geekbang.org/column/article/11232 84 | 程序员练级攻略（2018）：微服务https://time.geekbang.org/column/article/11116 85 | 程序员练级攻略（2018）：容器化和自动化运维https://time.geekbang.org/column/article/11665 86 | 程序员练级攻略（2018）：机器学习和人工智能https://time.geekbang.org/column/article/11669 87 | 程序员练级攻略（2018）：前端基础和底层原理https://time.geekbang.org/column/article/12271 88 | 程序员练级攻略（2018）：前端性能优化和框架https://time.geekbang.org/column/article/12389 89 | 程序员练级攻略（2018）：UI/UX设计https://time.geekbang.org/column/article/12486 90 | 程序员练级攻略（2018）：技术资源集散地https://time.geekbang.org/column/article/12561 91 | 程序员面试攻略：面试前的准备https://time.geekbang.org/column/article/13067 92 | 程序员面试攻略：面试中的技巧https://time.geekbang.org/column/article/13069 93 | 程序员面试攻略：面试风格https://time.geekbang.org/column/article/13191 94 | 程序员面试攻略：实力才是王中王https://time.geekbang.org/column/article/13192 95 | 高效学习：端正学习态度https://time.geekbang.org/column/article/14271 96 | 高效学习：源头、原理和知识地图https://time.geekbang.org/column/article/14321 97 | 高效学习：深度，归纳和坚持实践https://time.geekbang.org/column/article/14360 98 | 高效学习：如何学习和阅读代码https://time.geekbang.org/column/article/14380 99 | 高效学习：面对枯燥和量大的知识https://time.geekbang.org/column/article/14389 100 | 高效沟通：Talk和Code同等重要https://time.geekbang.org/column/article/28550 101 | 高效沟通：沟通阻碍和应对方法https://time.geekbang.org/column/article/32619 102 | 高效沟通：沟通方式及技巧https://time.geekbang.org/column/article/32796 103 | 高效沟通：沟通技术https://time.geekbang.org/column/article/32902 104 | 高效沟通：好老板要善于提问https://time.geekbang.org/column/article/33112 105 | 高效沟通：好好说话的艺术https://time.geekbang.org/column/article/41008 结束语 | 业精于勤，行成于思https://time.geekbang.org/column/article/41118 通过下方连接购买的极客专栏，可获得赏金 80% 的现金返现 福利 | 购买极客时间课程大返现]]></content>
      <categories>
        <category>极客时间</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十五条人命换来的教训 | 如何保证重庆公交悲剧不再发生？]]></title>
    <url>%2F2018%2F11-02%2F201811021629%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坚持不了学习真因为缺少自控力吗？ | 读：请有效的努力 八]]></title>
    <url>%2F2018%2F11-01%2F201811012307%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[职场能力的两大法宝，只不过大多数人都不喜欢]]></title>
    <url>%2F2018%2F10-28%2F201810281521%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[听说你特别在意别人的看法？]]></title>
    <url>%2F2018%2F10-27%2F201810272221%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做到了这一点，你就超过了 90% 的人]]></title>
    <url>%2F2018%2F10-26%2F201810261657%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何提升个人信念？]]></title>
    <url>%2F2018%2F10-24%2F201810242137%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入错行？| 读：请有效的努力 七]]></title>
    <url>%2F2018%2F10-23%2F201810232112%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何克服阶段性迷茫 | 读：请有效的努力 六]]></title>
    <url>%2F2018%2F10-21%2F201810211838%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作与提升 | 读：请有效的努力 五]]></title>
    <url>%2F2018%2F10-20%2F201810201706%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作与目标 | 读：请有效的努力 四]]></title>
    <url>%2F2018%2F10-19%2F201810192024%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作与选择 | 读：请有效的努力 三]]></title>
    <url>%2F2018%2F10-18%2F201810182204%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作的精髓 | 读：请有效的努力 二]]></title>
    <url>%2F2018%2F10-17%2F201810172156%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读：请有效努力（一）]]></title>
    <url>%2F2018%2F10-15%2F201810152122%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊一下最近买的 4 本书]]></title>
    <url>%2F2018%2F10-14%2F201810142130%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐两款记笔记的软件]]></title>
    <url>%2F2018%2F10-13%2F201810132024%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说两点大家对编程的误解]]></title>
    <url>%2F2018%2F10-12%2F201810121922%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自问，特么的我究竟在做什么？]]></title>
    <url>%2F2018%2F10-11%2F201810111845%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的镜像网站]]></title>
    <url>%2F2018%2F10-11%2F201810111225%2F</url>
    <content type="text"><![CDATA[建议收藏哦！如果你发现一些国外软件官方的下载速度缓慢，不妨去以下镜像站点下载，速度绝对会让你满意！ 网易开源镜像站：http://mirrors.163.com/ 阿里巴巴开源镜像：https://opsx.alibaba.com/mirror?lang=zh-CN 清华大学开源镜像站：https://mirrors.tuna.tsinghua.edu.cn/ 中国科学技术大学开源软件镜像站：http://mirrors.ustc.edu.cn/http://mirrors.ustc.edu.cn/ 北京理工大学开源软件镜像：http://mirror.bit.edu.cn/web/ 东软信息学院自己的开源镜像站：http://mirrors.neusoft.edu.cn/ 东北大学开源镜像站：http://mirror.neu.edu.cn/ 北京交通大学自由与开源软件镜像站：https://mirror.bjtu.edu.cn/ 浙江大学开源镜像站：http://mirrors.zju.edu.cn/ 感兴趣的朋友可以关注一下 blog 公众号哦，扫描下图即可！]]></content>
      <categories>
        <category>开源镜像站点</category>
      </categories>
      <tags>
        <tag>开源镜像站点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今后订阅号的文章类型调整]]></title>
    <url>%2F2018%2F10-10%2F201810101824%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[讲真，其实挺羡慕那种逗比的朋友关系的]]></title>
    <url>%2F2018%2F10-09%2F201810091953%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[励志的偶像换了一个又一个，而你却还是原来的你]]></title>
    <url>%2F2018%2F10-08%2F201810082201%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做一个自嗨的人]]></title>
    <url>%2F2018%2F10-07%2F201810071930%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈 | 中上层的价值观]]></title>
    <url>%2F2018%2F10-06%2F201810062055%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐两部电影]]></title>
    <url>%2F2018%2F10-05%2F201810052012%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识 Linux | 文档、目录的基本操作]]></title>
    <url>%2F2018%2F10-04%2F201810041814%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识 Linux | 连接]]></title>
    <url>%2F2018%2F10-03%2F201810031247%2F</url>
    <content type="text"><![CDATA[阅读原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识 Linux | 根目录解读]]></title>
    <url>%2F2018%2F10-02%2F201810021912%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普通人对程序员的两大误解]]></title>
    <url>%2F2018%2F10-01%2F201810011920%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选一个你认为对的先上路]]></title>
    <url>%2F2018%2F09-30%2F201809301712%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说三件事]]></title>
    <url>%2F2018%2F09-29%2F201809292326%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普通人遇不到“海底捞”怎么办？]]></title>
    <url>%2F2018%2F09-28%2F201809282054%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最新世界大学综合排名，清华亚洲第一？]]></title>
    <url>%2F2018%2F09-27%2F201809272147%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没事别想不开去搞「人设」]]></title>
    <url>%2F2018%2F09-26%2F201809261228%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[越来越多的设备将会支持「暗黑」模式]]></title>
    <url>%2F2018%2F09-25%2F201809251833%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「吃鸡」的反思]]></title>
    <url>%2F2018%2F09-24%2F201809241828%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享一波学习资料 | 中秋福利]]></title>
    <url>%2F2018%2F09-23%2F201809231713%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开公众号需要注意哪些问题？]]></title>
    <url>%2F2018%2F09-22%2F201809221706%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不是每个人都能成为「平头哥」]]></title>
    <url>%2F2018%2F09-21%2F201809211621%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 杭州 • 云栖大会有感]]></title>
    <url>%2F2018%2F09-20%2F201809201848%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[福利 | 购买 GitChat 课程大返现]]></title>
    <url>%2F2018%2F09-18%2F201809181746%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[福利 | 购买极客时间课程大返现]]></title>
    <url>%2F2018%2F09-18%2F201809181604%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 原文链接 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[精品算法、产品课程大优惠，有返现哦]]></title>
    <url>%2F2018%2F09-18%2F201809180500%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李玫瑾教授：家庭教育的养育之道 | 文字版]]></title>
    <url>%2F2018%2F09-17%2F201809171936%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强权往往毁于内部]]></title>
    <url>%2F2018%2F09-16%2F201809162215%2F</url>
    <content type="text"><![CDATA[查看原文 公众号更多文章（只能在微信中打开） 欢迎在下方留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公众号用其他方式实现留言功能]]></title>
    <url>%2F2018%2F09-14%2F20180914%2F</url>
    <content type="text"><![CDATA[正文：公众号用其他方式实现留言功能 更多文章 欢迎留言……]]></content>
      <categories>
        <category>公众号</category>
      </categories>
      <tags>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云服务器踩过的坑]]></title>
    <url>%2F2018%2F09-07%2F20180907000%2F</url>
    <content type="text"><![CDATA[初次购买，一定要好好看相关介绍，相关文档；否则后期会出现不必要的问题，最后找客服都解决不了。最后只能重新购买！一、购买服务器时需要注意几处：网络和安全组中的网络、安全组、公网宽带；系统配置的登陆凭证，密钥对、自定义密码、创建后重置。 初次购买会有默认的网络、安全组。默认的专有网络，不支持修改私网 IP ，购买时选择默认的网络配置，同一个地区很可能分配到同一个网段。如果你后期需要把自己购买的服务器与他人购买的服务器连接，会发现网段冲突的问题。 购买的时候尽量选择重新自建专有网络！ 1、新建好专有网络有，安全组也要新建，它们是配套的。新建安全组时，直接按照它的提示新建就可以了。 2、如果选择了自己新建的专有网络组，一定要注意看公网宽带的选项，记得要勾上。 3、系统配置中，如下图： 选择密钥对登陆的方式安全性最高，设置的时候也相对复杂。通常都是选择自定义密码的方式登陆，简单快速，安全性也就比密钥对差一些。如果不知道自己怎么选择，可以选择创建后再设置。 二、云服务器之间私网可以相互连通很重要。具体验证的办法就是，用 ping 的命令，从一台服务器去 ping 另外一台云服务器中的私网。 通常来说，同一个账号购买的云服务器，选择的是同一个地区而且还是同一个网络专有组。这种情况下，购买的云服务器的私网都是可以相互通信的。 不同账号、不同地域的云服务器之间私网是无法通信的，还有一些同一个账户，不同地域下的云服务器私网之间也是无法通信的。这种情况下，可以去看他们的稳定。阿里云有提供相关解决方案。 解决思路是：设置安全组，或者用 VPC 的方式去解决。 不同的账户，不同的地域，不同安全组的云服务器内网想要通信，只能够选择 VPC 的解决方案。具体可看下方链接文章： 阿里云ECS同区域不同账户之间通信配置：https://blog.csdn.net/caozhanweicaiyuli/article/details/79254276 跨账号VPC互连：https://www.alibabacloud.com/help/zh/doc-detail/44842.htm?spm=a2c63.p38356.b99.15.5d4f28c9EnfNKr 高速通道实现多VPC内网互联：https://yq.aliyun.com/articles/368813# 关于阿里云不同vpc下的内网互通：https://blog.csdn.net/ymybxx/article/details/78324493 VPC通信常见问题：https://help.aliyun.com/knowledge_detail/54486.html?spm=a2c4g.11186623.6.729.29f57d73NEB9F5 注意：不同的账户，不同的地域，不同安全组的云服务器使用 VPC 解决私网 IP 相互通信问题的前提是，他们的专有网络网段不在同一个！不会出现相互冲突的问题，如果有服务器之间的网段在同一个，会导致网段冲突。从而导致 VPC 的方案无法解决。 三、网段冲突的问题可以有方法解决的的，可以通过更改私网 IP 网段；前提是该云服务器用的是自己新建的专有网络组。如果你用的是系统默认的专有网络，私网 IP 的网段就无法修改，阿里云的客服是这么回复的。 四、购买阿里云服务器之前需要了解的概念，重点！如果不先了解，之后遇到问题就会不知道怎么去排查。需要提前了解：云服务器的操作系统、对应的硬件配置（内存、cpu、硬盘等）、网络宽带计费、网络组（专有网络、经典网络、私有网络区别）、安全组。 一个程序只需要多台服务器，这种情况下程序出现问题大多数是程序的问题。如果一个程序需要多台云服务器相互配合，且出现连接上的问题时；这种情况下问题多数处在云服务器之间的相互连接上，可以先从云服务器的安全组配置、云服务器网络配置、防火墙这些方面去查找。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说说拖延症]]></title>
    <url>%2F2018%2F08-01%2F20180801-080710%2F</url>
    <content type="text"><![CDATA[为什么我们会认为自己有拖延症？ 拖延症是怎么发生的？ 拖延症会带来什么样的后果？ 选择拖延的原因 01 前言 大家对如下的场景可能都很熟悉：多睡几分钟再起，多玩几分钟手机再睡觉，今天天气不好明天再去跑步，今天精神不好明天再学习…… 这些情况都属于拖延症，拖延症已经成为了现代社会中最主要的“隐形疾病”之一。甚至可以说，你与成功之间的距离就隔着一个拖延症。 那么，拖延症有什么特点呢？ 拖延症可以说是新时代的一个“心理癌症”，具有着传染力强、难以治疗、容易复发、耽误终身等特点。拖延这个事情还容易在各种事情上集中展现，一个人一旦对自己放松了要求，开始了拖延。就会润物无声地蔓延到其他事情上去，当你发现的时候就已经“病入膏肓”了。 02 经过胖子曾经特地买过几本有关“拖延”的书《拖延症心理学》《战胜拖延症》……想着用于自救。可看完之后拖延症治好了吗？ 没有！！！ 胖子至今仍在与拖延症做斗争，现在发起的「早起挑战营」就是与拖延症斗争的一个表现。至少目前看来药效还是挺不错的。虽然还在与拖延症做斗争，却也积累了一些战斗经验，下面就分享一下。 03 为什么我们会认为自己有拖延症？一般的人是不会认为自己有拖延症的。只有那些想改变自己的，而又改变失败的人，在回想起失败的原因是才会意识到自己患有拖延症。 有一颗对自己现状不满意，认为自己还可以做的更好的心，却没有强悍执行力的手脚。 想要早起锻炼身体，闹钟响后却又想多睡几分钟；想要被单词、学英语，却又想着再打一局游戏再说。当你有该做的事情却不想去做，而是想着逃避的时候，你也就有了拖延症了。 04 拖延症是怎么发生的？首先要确认一下，动物和人都是一种好逸恶劳、短视的生物。 在没有生存压力的情况下，生物的本能会优先选择立即让人愉悦、及时让人满足、开心的事情。如：睡懒觉、玩手机、玩游戏…… 而锻炼身体，学习，背单词，看书并不能立即让人产生愉悦感，相反还会让人痛苦。这个时候，会优先选择娱乐、享受。 当面临生存压力的时，本能想的就是如何生存下去。这个时候脑海是不会想着如何去享受的，而是想着该怎么去填报肚子。如果告诉你锻炼、背单词、学英语可以让自己以后过的很好，你会毫不犹豫的进行。 所以绝大多数的拖延都发生在当前没有生存压力的时候。至于以后会不会有生存压力，人们并不会在意那么多，先过好当下再说。 现在，你可以回想一下自己拖延症发生的情况，是否属实？ 05 拖延症会带来什么样的后果？拖延造成的后果，并不只是某一次计划没有完成，某一次任务没有做好，而是会给你带来一种永远都很平庸的人生。 社会竞争已经很激烈了，竭尽全力的去打拼都不知道会有什么好的结果。何况是你每次都勉强、仓促去完成的任务？那种勉强、仓促做事情的的结果，根本就不会是你的真实水平，也不会带来好的结果。升职、加薪这些将会永远与你无缘。 更加恐怖的是会让你自己产生一种自我感动、自我佩服的错觉。一个文案给你 1天的时间让你第二天上交，结果你放肆的玩了一整天，临睡前才想起任务没完成。于是通宵达旦的开始干活，当你匆匆忙忙完成上交任务之后，居然还会有一种很勤奋的错觉。 毕竟也是加班加点赶出来的，甚至差点都通宵了，这样的“勤奋”难道不应该佩服一下自己吗？不应该让自己感动吗？ 到最后，最坏的结果并不是平庸的本身，而是如果每个人都可以早点开始的话，原本是可以做的更好，甚至可以拥有截然不同的人生！ 06 选择拖延的原因当前有生存压力就会努力、奋斗，如果当前没有生存压力也就不会想着努力奋斗，这是为什么呢？为什么在当前没有生存压力的情况下会选择拖延呢？ 1、可能是制定的任务太过艰巨了，自己不够自信，无法完成。很多人会因为内心恐惧而拖延，如：写论文、背书。真的会因为事情困难而逃避，而选择拖延下去。 2、对未来的自己太过于自信。人们常常会低估未来的难度，认为未来去做一件事情会用更少的时间完成。但实际上拖延之后，往往会导致更加狼狈。 3、完美主义。有的人对于自己有着完美主义倾向，如果开局不好，他会放弃整个计划。比如说：计划早上 6 点起床跑 5km；第二天发现闹钟没响，睡到 6:30 才醒，这个时候他会放弃今天的 5km 跑步，想着已经错过时间了，那就将错就错呗。 4、自我欺骗。有些人在拖延上特别难以发现，拖延真正的任务，而选择一些简单的任务替代。同时可以表现的非常忙碌，以此来暗示自己很勤奋，一直在做任务。 5、生物短视的本能。上文有说过拖延出现的情况，通常是在没有生存压力的时候。努力学习、认真提升自己会在未来给你带来很大的收益、快乐，但这种收益是不确定的。而当下选择玩游戏、享受确实立马可以获得快乐的，这种收益是明确的。这种本能会让你选择收益明确的，而放弃不确定的 07 小结本文讲述了拖延的来源，以及产生的原因。拖延的影响可大可小，如果你也有不错的与拖延斗争的经历，不妨一起交流交流。文章的内容参考了某学习课程文件，可以看作是一个学习笔记。后续文章将会介绍解决拖延的方法，敬请关注。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[早上起不来真的是不够执着吗？]]></title>
    <url>%2F2018%2F06-24%2Fchallenge-no3%2F</url>
    <content type="text"><![CDATA[早起挑战营—第三天 1 很多人都想早起，却怎么也起不来；或者起来了一两次，后续没有坚持。当看到一些长时间早起的人，再看看自己早起失败的情况，总会对自己说“是我对早起不够执著”，“我就没有的执著力”，“没有强大的动力”…… 胖子觉得其实每个人都具备了自律、执著这些能力，只是在自己想用到的地方没能够激活，在不经意的时候用了却没曾留意，以致于都想不起来自己具备这些能力。 下面看一个不喜欢吃榴莲的网友分享。 2 “今天早起失败，看来我没有执著这方面的能力，可能是昨晚做梦的原因。昨晚梦见有人逼我吃榴莲，如果不吃就强制性的把我按在榴莲上。然后还试着把我绑起来，再使劲的把榴莲往我嘴里塞，最后嘴都弄破了还是没有吃，后面就吓醒了……” 网友在吐槽自己不够执着，胖子看到后在底下评论了“你那强烈的拒绝吃榴莲也是一种执著的表现，只是没能用到早起方面。” 后面胖子也没有看到回复，这个有可能是个段子，也有可能是真实的事情。真假先暂且不提，这个事情胖子产生了一个想法。 其实每个人身上都具备着自己敬佩、崇拜的人身上同样的能力，简单一点就是别人身上有的优点其实你自己也有。 区别就在于你身上的这些品质是隐性的，需要千瓦的灯泡才能发现，想要灵活运用就更加的困难了；而成功的人身上这些品质是显性的，不但像灯塔一样闪闪发光，还可以为迷航的人指引方向。 哎，人与人之间的差别咋就那么大呢？为啥别人可以如此厉害，是天生注定的吗？ 3 大家都是受过义务教育的人，差距并没有那么大。差距在后期慢慢变大的原因就在于成功的人在积累，在有意识的锻炼自己的能力，所以越到后面差距越大。 比如游戏中同一个角色的技能都是一样的，A 在有意识的练习使用，怎么样组合使用伤害会更高，在什么样的情况下释放技能会产生最好的效果；B 就很随意，完全凭借感觉使用。结果就是 A 的战绩远远要好于 B 。 看到这里大家明白了吗？ 很多的能力其实自己身上都有，只是我们不熟悉，不会运用，缺少了刻意的练习，缺少了积累。 想要改善的话自有不断的练习，有意识的去学习、练习。 当然了，可能会有朋友说“我身上实在是没有发现 xxx 的能力”。即使是这样，也不用担心，因为我们可以学，可以练习。 如果有遇到这样的情况，找一个你发现具备该能力的人，去学习。一定要带着脑袋去学习，一定要去实践。 4 胖子发起了一个早起挑战营的活动，也是想通过早起锻炼自己的自我的管理能力，锻炼自己的自律，同时也通过早起的时间运动，锻炼自己的体魄。 早起挑战营：每天早上 05:00 — 07:00 之间起床，起来后完成自己给自己订的目标（运动、看书、学英语、写作等）。 聚集一些想要早起的朋友在一起，分享一些自己早起的经历，同时也看看其它朋友的经历，大家相互鼓励、相互监督，达到改变自己的目的。 一个人的学习、改变是孤独的；一群气味相投的人学习、改变，有人鼓舞，有人监督，这样会更加有效，也会更加的有趣。 关注“胖子的猜想”，点击下方的“早起挑战”，即可获取入群方式。 快来加入吧！]]></content>
      <categories>
        <category>早起挑战营</category>
      </categories>
      <tags>
        <tag>早起挑战营</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jps无法查看运行程序进程]]></title>
    <url>%2F2018%2F05-30%2Fjps-question%2F</url>
    <content type="text"><![CDATA[出现情况：程序正常运行后,jps使用也正常，间隔一段时间后jps无法查看Java相关进程了 jps简介 先了解一下jps是什么？ jps：Java Virtual Machine Process Status Tool 用于查看本机Java相关进程的pid。 相关用法： 1234567选项 -q 仅输出VM标识符，不包括class name,jar name,arguments in main method -m 输出main method的参数 -l 输出完全的包名，应用主类名，jar的完全路径名 -v 输出jvm参数 -V 输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags=所指定的文件 -Joption 传递参数到vm,例如:-J-Xms48m Linux中配置好Java的环境变量后，即可使用jps命令查看Java相关进程，上文所列举的是配套使用的参数。 在使用过程中，有可能会出现jps查看不了Java进程的情况。程序在运行，jps命令却看不到相关程序的进程。但用Linux的ps -aux相关命令却可以看到，问题出在哪里呢？ 详细介绍可以看该文：http://trinea.iteye.com/blog/1196400 问题梳理 其实上述的文章已经指明了，小编在阅读的时候却没有过多的注意，导致在解决这个问题时走了不少弯路。 原因是：程序启动正常，运行正常，使用jps查看也是正常的。却在间隔了几分钟或者十几分钟之后，jps无法查看进程了。 发现了上述情况后，小编的第一反应，是不是系统相关的问题，而不是是不是程序配置出现了相关问题。 因为此次出现的情况发生在新使用的腾讯云服务器中，而程序的配置是与之前阿里云上的配置一样的。同样的配置方式阿里云正常，腾讯云中就出问题了，所以没有怀疑相同的配置情况是否适合腾讯云上。 首先分析一下jps查看进程的方式： Java程序启动后，会默认在系统的根目录下的/tmp文件夹中创建一个含当前用户名的hsperfdata_userName文件夹，同时在该文件夹中会创建以Java相关进程id为为文件名的文件。并在相对应的文件中存储jvm运行的相关信息。 jps就是读取hsperfdata_userName文件夹中文件的信息，并把读取到的信息输出到控制台展示。 重点：如果根目录下的/tmp文件被删除，或者说/tmp中的hsperfdata_userName文件夹被删除，那jps命令是查看不了Java相关程序的进程的。 因此，出现jps无法查看已经启动了的相关Java进程的原因就是/tmp文件夹中的hsperfdata_userName被删除，或者无访问权限。 问题排查 如果有遇到相关问题，第一时间查看根目录下/tmp文件夹中的信息。 原因找到了，那为什么会出现/tmp中的信息被删除呢？ 启动的某个程序出现问题，把/tmp中的信息全部删除 Linux系统自带的清除机制 /tmp中的磁盘满了，无法存储数据 针对可能出现的问题一一排查。 启动的某个程序出现了问题将程序关闭，或者重新启动一下Linux机器，在不启动任何程序的情况下，/tmp目录中存放一些文件。隔一段时间再看看是否还存在。 Linux系统自带的清除机制Linux作为服务器，通常来说启动之后是很少会关闭的。根目录下/tmp文件作为临时缓存存放的路径，在长时间的使用过程中是会不断的产生新文件。为了保证Linux的正常运行，同时又避免/tmp文件夹无限的增加导致硬盘无法存放。 Linux针对这中情况，做了一些定时清理的处理的设置。常用的可能定时删除临时目录的工具为crontab、redhat的tmpwatch、ubuntu的tmpreaper等等。通常会在/etc/目录下，可以看到类似cron.daily,cron.hourly,cron.monthly等文件夹，它们就是用来执行相关定时任务的。说明仅供参考，上文描述情况基于centOS6.5。 注：不同的Linux版本存放位置会不一样，命名方式也会有差别，管理的入口也会不也一样，设计的原理确实一样的。可以根据详细的系统版本去查找， /tmp中的磁盘满了，无法存储数据用命令查看磁盘使用情况，free、du -h 等，发现还有很大的磁盘空间，排除了这种情况。 进过排查，发现是自己程序问题导致的，最后在使用另一种配置方式后，程序成功的运行在了腾讯云上。ps:在面对问题的时候，怀疑自己出错可能也是一种解决方式。 小结 通常来说，遇到了问题，就是看到了进步的方向。解决问题的过程中，就是在不断的进步。 经验丰富的对应面就是，遇到了非常多的问题。当你把遇到的问题处理掉了，并且可以好好的终结，你的经验也就丰富起来了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo blog 添加分享功能]]></title>
    <url>%2F2018%2F05-28%2Fhexo-addshares%2F</url>
    <content type="text"><![CDATA[前几天把hexo博客的主题更换了一下，新换的主题没有集成分享功能，所以手动添加一下。 此次添加的分享功能为第三方http://www.mob.com/提供的，本着快速的方式，整个功能的添加过程也很简单。时间充裕的情况下，可以尝试自己编写。下文是记录的步骤。 主要有两个步骤： mob网站应用的创建 hexo博客中添加ShareSDK的功能 第一步 —— mob 先注册mob账号，登陆成功后进入后台管理。 下面文字记录一下操作步骤： 新建应用 如新建hexo应用 进入hexo应用管理页面 进入新建的hexo应用后台管理页面会有相关功能的添加 添加ShareSDK功能 添加成功后会出现相关提示 记录好AppKey 一个应用的Appkey值只有一个，后续的Share功能中会需要用到 至此，mob中的账号信息，应用创建完毕。 参考如下图所示： 进入mob官网中的产品文档区，找到web集成文档http://wiki.mob.com/%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90-13/。找到快速集成区域，可以看到需要集成的代码。此处将官网的集成代码拷贝了过来，如下所示： 12345678910111213141516&lt;!--MOB SHARE BEGIN--&gt;&lt;div class="-mob-share-ui-button -mob-share-open"&gt;分享&lt;/div&gt;&lt;div class="-mob-share-ui" style="display: none"&gt; &lt;ul class="-mob-share-list"&gt; &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;&lt;script id="-mob-share" src="http://f1.webshare.mob.com/code/mob-share.js?appkey=你的appkey"&gt;&lt;/script&gt;&lt;!--MOB SHARE END--&gt; 将上面的代码拷贝到博客中的页面，修改成自己设置应用的Appkey值，部署之后即可使用 第二步 —— hexo博客中添加功能 上文中已经完成了先期的准备工作，现在开始在hexo博客中添加功能。 找到hexo博客使用的主题目录，进入layout文件夹，所有页面相关的功能都是在此文件夹下。 _layout.swig 页面是整个hexo博客功能关联的核心。以下简单介绍一下hexo资源相关作用 1234567一般hexo主题下会存有如下几个文件夹languages：用与做多语言适配layout：页面功能设计区，主页面功能，菜单栏，页面头部，页面底部，评论，统计等都是添加在此处source：资源管理区域，css样式，图片，字体，依赖lib 进过简单的源码梳理，发现只有在主题下的/layout/_layout.swig 文件中&lt;body&gt;&lt;/body&gt;标签中添加快速集成的代码即可。 注意一下添加的位置，建议放到评论功能的位置之上。参考如下图所示 这样简单的添加功能是好了，但却不利于后期的维护。通过查看源码，我们发现主题源码已经做了相关接藕操作。将功能分成不同的部分，然后在_layout.swig页面进行拼装 所以，添加share功能也应该进行相似的处理。 思路： 在/layout/_partial文件夹下新建shares.swig 文件 把快速集成中的代码加入其中 _layout.swig页面相关位置引用添加的shares.swig文件 shares.swig 文件参考代码 123456789101112131415161718&#123;% if page.comments and not is_home() %&#125;&lt;div class="-mob-share-ui-text -mob-share-open"&gt;分享&lt;/div&gt;&lt;div class="-mob-share-ui -mob-share-ui-theme-slide-bottom" style="display: none"&gt; &lt;ul class="-mob-share-list"&gt; &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-weixin"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-youdao"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;&lt;script id="-mob-share" src="http://f1.webshare.mob.com/code/mob-share.js?appkey=theme.shares.shares-mob"&gt;&lt;/script&gt;&#123;% endif %&#125; 参考代码有所调整，首先增加了功能限制，并不是每一个页面都需要分享功能。上面的处理是评论功能开启，分享功能也同时开启，blog首页中不展示分享功能。可根据实际情况做调整。 _layout.swig中的引用代码 1&#123;% include '_partial/shares.swig' %&#125; 注意存放的页面位置 Share SDK相关设置说明 支持的平台上文中，share功能已经添加成功，这部分是记录一下mob官网中关于shareSDK的一些设置说明。 支持的分享平台如下所示，本文中的功能并没有完全添加，知道了官方支持的分享平台后，则可以根据实际情况进行调整 123456789101112131415161718192021222324252627平台名称 ID 新浪微博 ——》 weibo 微信 ——》 weixin QQ空间 ——》 qzone QQ好友 ——》 qq 豆瓣网 ——》 douban Faceboo ——》 facebook Twitter ——》 twitter Pocket ——》 pocket Google+ ——》 google 有道云笔记 ——》 youdao Tumblr ——》 tumblr Instapap ——》 instapaper Linkedin ——》 linkedin 分享功能弹出的效果 通过增加-mob-share-ui元素的css类改变弹出效果 默认效果 -mob-share-ui-theme -mob-share-ui-theme-scatter上边滑出 -mob-share-ui-theme -mob-share-ui-theme-slide-top下边滑出 -mob-share-ui-theme -mob-share-ui-theme-slide-bottom左边滑出 -mob-share-ui-theme -mob-share-ui-theme-slide-left右边滑出 -mob-share-ui-theme -mob-share-ui-theme-slide-right 修改参考如下，改成了左侧弹出分享功能 1234&lt;!--MOB SHARE BEGIN--&gt;&lt;div class="-mob-share-ui -mob-share-ui-theme -mob-share-ui-theme-slide-left" style="display: none"&gt; 略...&lt;/div&gt; 根据实际需求修改样式。 更多的功能可看官方文档：分享设定 注：如有遇到问题先自己排查一下，然后再看看官方文档，之后再做调整修改。 还有其它的第三方分享插件如：百度分享，具体选择适合自己的,方法大致一样。本文使用的是百度分享。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Travis CI 自动部署hexo到GitHub/Coding]]></title>
    <url>%2F2018%2F05-27%2Ftravis-autodeploy-github-with-coding%2F</url>
    <content type="text"><![CDATA[同时部署到GitHub、Coding 使用hexo搭建个人blog一年了，体验还不错，但也存在着一些问题。blog的管理、维护对操作环境有一定的要求，必须安装node、hexo、git等环境。 如果更换了电脑呢？或者说同时想再公司、个人电脑中管理和维护blog呢？ 按照剧情的正常发展应该： 新的电脑中搭建node、hexo、git等环境 拷贝blog源码到搭建好环境的新电脑中 使用heox编写blog hexo 编译部署到GitHub/Coding 于是想，能否较少对系统环境的依赖呢？ 首先hexo博客实现的基本流程：本地环境中编写blog，使用hexo命令编译，再通过git上传编译好的文件（非源码）到GitHub或coding中的对应仓库，从而实现blog的管理维护。 从中可以发现，最关键的就是本地源码了；如果多个环境中操作hexo，每个环境中的blog源码设置、样式不一样，编译上传后还会导致blog发生各种变化。 这样的情况下是不怎么适合多客户端管理、维护blog的。 要解决的问题就是，既可以便捷的多客户端管理、维护blog，同时又减少blog部署对环境的依赖。 方便多客户端管理的实现很简单，可以依赖GitHub实现同步协助。 这21个自动化部署工具，你都知道吗？ Travis CI 便适用于GitHub中使用Travis CI：https://travis-ci.org/ 可以同步到你的GitHub账户，允许自动化测试和部署。 Travis CI原理：Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行sudo来进行apt-get install。 集成Travis CI用来做什么呢？ 通过Travis CI（Continuous Integration是持续集成的意思）去做hexo 源码编译部署的工作。通过配置文件进行设置，当hexo博客的源码仓库中有改动，触发编译部署命令，去部署hexo，然后再把编译好的文件传入blog的仓库中进行更新。 这样只需要关注blog源码仓库，不用再管blog的运行仓库。 本地也不再需要依赖node、hexo-cli等环境了。只需要可以访问GitHub，操作GitHub即可（浏览器也可以操作GitHub的这样调整一下，可以说完全解决了对环境的依赖）。 Travis CI 使用 GitHub Pages 的博客站点已经搭建成功，并且可以正常访问。如果未搭建或者说无法正常访问，先把GitHub Pages 的博客站点搭建好。 可以搜索GitHub搭建hexo/jeykll博客，或者Coding搭建hexo/jeykll博客 GitHub Pages默认要求必须使用master分支，所以我们可以在该仓库中新建一个分支（分支名随意如：hexo）用于保存博客的源码文件。编译好的blog文件则放入master分支。 已经搭建成功的默认是有master分支的，只需要新建一个hexo分支。 新建仓库hexo分支 12345# 先克隆项目到本地某个空文件夹下git clone https://github.com/hadronw/hadronw.github.io.git # 创建并切换分支 hexogit checkout -b hexo hexo 分支是用来存放blog的源码文件的，所以应该把该分支下的文件都删除，再把blog的源文件上传到改分支，再提交到远程仓库hexo分支上。 参考操作如下： 123git rm -rf * #删除仓库中的文件，可能本地的文件还存有，则需要使用 rm -rf 命令git commit -m &quot;清空文件夹&quot; #提交删除信息git push origin hexo:hexo #将删除的信息推送到远程仓库 再把blog的源文件拷贝到上放的hexo分支对于的文件夹中，再把blog源文件上传到hexo分支上 123git add *git commit -m &quot;提交blog源文件&quot;git push origin hexo 这样GitHub中的仓库就可以看到两个分支：hexo用于存放源文件，master分支用于存放编译后的静态文件 之后我们更新文章都是提交到指定的hexo分支中，注：一定要提交正确，否则无法展示出来 1git push origin hexo # 参考代码 Travis CI 设置 进入Travis 官网，用GitHub账号登陆。登陆成功之后会发现自动关联上了GitHub上的仓库。 找到你的个人blog对应的仓库即yourname/yourname.github.io，启用项目（点击按钮，启动状态有为绿色）再点击setting进入到仓库的配置页面。 More option ——》 Settings 进入到仓库的设置页面 General 栏开启： Build only if .travis.yml is present——表示“只有当 .travis.yml配置文件 存在时才构建” Build branch updates —— 表示 “当分支更新时构建” 其它的选默认选项 Travis CI在自动构建完成后需要push静态文件到仓库的 master 分支下，而访问GitHub的仓库是需要权限的，下面来看看如何添加GitHub权限 配置GitHub Access Token GitHub页面，账号Settings ——》Developer Settings ——》Personal access tokens ——》 Generate new token 点击后提示输入密码后继续，然后来到如下界面，取名字Travis_gh_token 后面的步骤会用到，勾选相关权限选项repo 下全部和 user 下的 user:email 即可。图片如下： 生成完成后，将该token拷贝下来。 此token页面只会出现一次，一定要拷贝保存下来，Travis中的配置需要添加。如果忘记只能重新创建一个 配置Coding中的Token Coding.net 个人账号页面 ——》访问令牌 ——》新建令牌 ——》令牌描述取名为（Travis_co_token）后续的步骤会用到 ——》勾选相关权限project:depot 和user.email 如图所示： 生成完成后，将该token拷贝下来。 此token页面只会出现一次，一定要拷贝保存下来，Travis中的配置需要添加。如果忘记只能重新创建一个 在Travis CI中配置GitHub、Coding生成的token值 将上面获取到的GitHub token添加到Environment Variables部分，值为上文要求保存的token值,而名称即为上面设置的Travis_gh_token(请更改为个人所设置名称)。不勾选后面的 Display value in build log . 否则会在日志文件中暴露你的token信息，而日志文件是公开可见的。 同样的步骤添加Coding中生成的token值。注意不要添加混乱，如果再后续的构建中出现令牌无效，只需要重新配置一个即可 至此我们已经配置好了要构建的仓库和访问的token，接下来就是为Travis配置构建了。如何设置触发自动部署，如何部署。 Travis部署设置 在hexo分支根目录下创建.travis.yml 配置文件。在之前的步骤中我们勾选了Build only if .travis.yml is present仅当.travis.yml存在时才构建。 只有hexo分支中含有改文件，才会执行构建。该怎么部署的也是在该文件中配置，参考.travis.yml配置文件如下： 123456789101112131415161718192021222324252627language: node_js # 设置语言node_js: stable # 设置相应版本cache: apt: true directories: - node_modules # 缓存不经常更改的内容install: - npm install # 安装hexo及插件 - npm rebuild node-sass --force #该命令是根据构建失败的日志提示添加的before_install: - export TZ='Asia/Shanghai' # 更改时区 - npm install hexo-cli -g # 安装hexo环境 - chmod +x ./publish-to-gh-pages.sh # 为shell文件添加可执行权限after_script: - ./publish-to-gh-pages.shscript: - hexo clean # 清除 - hexo g # 生成branches: only: - hexo # 只监测hexo分支env: global: # Github Pages - GH_REF: github.com/hadronw/hadronw.github.io.git #设置GH_REF，注意更改成自己的仓库地址 # Coding Pages https://git.coding.net/hadronw/hadronw.git - CO_REF: git.coding.net/hadronw/hadronw.git 辅助配置文件publish-to-gh-pages.sh 123456789101112131415#!/bin/bashset -evgit clone https://$&#123;GH_REF&#125; .deploy_gitcd .deploy_gitgit checkout mastercd ../mv .deploy_git/.git/ ./public/cd ./publicgit config user.name "hadronw"git config user.email "hadronw@qq.com" # add commit timestampgit add .git commit -m "Travis CI Auto Builder at `date +"%Y-%m-%d %H:%M"`"git push --force --quiet "https://$&#123;Travis_gh_token&#125;@$&#123;GH_REF&#125;" master:mastergit push --force --quiet "https://hadronw:$&#123;Travis_co_token&#125;@$&#123;CO_REF&#125;" master:master 注意，文中的配置文件仅供参考，对应的名称根据实际换成自己设置的名称。GH_REF表示GitHub上的仓库地址，CO_REF表示Coding上的仓库地址 上传配置文件及所有源文件开启自动部署 到此为止，基本上的流程配置已经完成，现在把编写好的配置文件上传到GitHub中仓库hexo分支中。注：同时部署GitHub、Coding等多个仓库时，还是一GitHub为主，travis支持的就是GitHub，所以Coding只是作为辅助仓库用的 1234git add *git add .travis.yml # 注.travis.yml 文件 git add * 命令可能无法添加，所以需要单独再添加一次git commit -m &quot;提交配置信息及源码&quot;git push origin hexo # 一定要推送到对应的分支上——hexo 否则会无法触发自动部署 当我们把文件上传到hexo分支中后.travis.yml配置文件上传后，Travis CI的项目页面会自动监测，如检测到了.travis.yml配置文件后，会根据.travis.yml中的配置文件自动部署项目。 Travis CI页面中会显示部署的日志，如果部署成功，则可以访问我们的博客了。注意查看日志文件，如果出错了，根据日志文件中的提示修改.travis.yml配置信息 常见错误： 123remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码检查配置文件，token是否配置正确 参考链接： 使用Travis自动部署Hexo到Github与自己的服务器：https://segmentfault.com/a/1190000009054888 使用Travis CI自动部署Hexo： https://xuanwo.org/2015/02/07/travis-ci-hexo-autodeploy/ Hexo 自动部署到 Github：http://lotabout.me/2016/Hexo-Auto-Deploy-to-Github/ 使用 Travis CI 自动部署 Hexo 博客：https://shawnho.me/2017/11/23/deploy-hexo-blog-with-travis-ci/ 使用Travis CI自动部署Hexo博客：http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/ 使用travis-ci自动部署Hexo到github和coding: https://juejin.im/post/5afe61f5f265da0b8d422a3e 基于Travis CI实现 Hexo 在 Github 和 Coding 的同步部署: https://blog.csdn.net/qinyuanpei/article/details/79388983]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>travis</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo写作的基本语法]]></title>
    <url>%2F2018%2F05-27%2Fhexo%E5%86%99%E4%BD%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[官方文档:https://hexo.io/zh-cn/docs/writing.html 头部规则的相关设置文章中的头部会需要根据规则编写标题、更新时间，标签分类等类容。对读者是不可见的，语法如下： 1234567---title: Git添加账号date: 2017-06-08 19:49:26tags: gitcategories: gitcomments: true--- 解释说明 1234567---title: Git添加账号 # 文章标题date: 2017-06-08 19:49:26 #创建时间tags: git # 文章标签，可使用多个标签categories: git #文章分类目录comments: true # 是否开启评论功能，注：需要在blog相关配置中添加第三方评论插件--- 基本规则遵循Markdown语法规则，维基百科：https://zh.wikipedia.org/wiki/Markdown 中有基本介绍、语法介绍。 Markdown文档（.md文档）的编辑器：Atom、Mweb（功能强大，喜欢它的页面）、Mou／MacDown（免费，简介容易上手）、Quiver等都支持。 多个标签的使用123456789tages: [标签1,标签2,...标签n]或tages: - 标签1- 标签2...- 标签n 图片的使用hexo官方使用说明 hexo使用图片 使用网络URL图片地址 1![图片](http://img.ivsky.com/img/bizhi/pre/201804/26/may_2018-012.jpg) 也可以把自己需要使用的图片上传到云上，生成URL链接，然后再使用（如：七牛）。具体根据自己的情况做决定。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vimium的使用]]></title>
    <url>%2F2018%2F05-26%2FVimium%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[浏览器中的一款插件，主要用键盘替代鼠标操作浏览器。操作浏览器Chrome 页面滚动j ——》 向下滚动 k ——》 向上滚动 h ——》 向左移动 i ——》 向右移动 gg ——》 向上滚动到顶端 G ——》 向下滚动到末尾 d ——》 向下翻一页 u ——》 向上翻一页 r ——》 刷新页面 tab——标签页K ——》切换到右一个标签 J ——》切换到左一个标签 g0 ——》去第一个标签 g$ ——》去第$g个标签页 t ——》创建一个新标签页（ctrl+t） yy ——》copy当前页面url Copy the current URL to the clipboard gs ——》查看网页源码 View page source yf ——》拷贝当前页面的连接到剪切板 Copy a link URL to the clipboard yt ——》创建当前页面的一个副本(copy当前路径在新Tab中打开)-Duplicate current tab YT ——》罗列出当前所有Tab页(并提供索引)，可任你选择性跳转 p ——》在当前标签页中打开剪切板中的链接 Open the clipboard’s URL in the current tab P ——》在新的标签页中打开剪切板中的链接Open the clipboard’s URL in a new tab gu ——》Go up the URL hierarchy 回到当前页的主页 gU ——》Go to root of current URL hierarchy 回到当前页面的根页面 f ——》 按f键后，当前页面上所有链接上都会出现键盘符号，再按不同的按键，在当前页面打开按键对应的链接 F ——》 功能同f键一样，只是在新的标签页打开链接 历史记录/书签o ——》 在当前页面中打开URL，书签和历史记录 Open URL, bookmark, or history entry O ——》 在新标签页中打开URL，书签和历史记录Open URL, bookmark, history entry, in a new tab b ——》 打开书签 Open a bookmark B ——》 在新标签中打开书签 Open a bookmark in a new tab在命令行模式，按下b(B)，可以对标签进行检索，检索结果通过tab键进行选择，回车即可打开标签 其它T ——》 搜索打开的标签页 Search through your open tabs / ——》查找（ctrl+f） i ——》 进入输入模式 Enter insert mode esc ——》 退出]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog 更改主题]]></title>
    <url>%2F2018%2F05-25%2Fblog-%E6%9B%B4%E6%94%B9%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[今天花了点时间把blog的主题更改了一下。之前用的是Next的主题，有好些功能都用不到。所以换了一个简单一点的，暖颜色的。 记录一下看着不错的主题 简约型的hexo-theme-even Hacker spfk Haojen hexo官方主题聚集处hexo主题大全 功能强大的NextNext 其它BlueLake博客主题的详细配置 Hexo搭建博客教程 手把手教你使用Hexo + Github Pages搭建个人独立博客 Hexo博客提交百度和Google收录 让Baidu和Google收录Hexo博客 Hexo博客之速度优化 博客的第三方功能评论插件——Disqus国外的需要翻墙才能使用、畅言国内、来比力 百度站长：https://zhanzhang.baidu.com/ 百度统计: https://tongji.baidu.com/ Google Analytics： https://www.google.com/analytics/ Google 站长: https://www.google.com/webmasters/verification/home?hl=zh-CN 文章统计leancloud : https://leancloud.cn/ 注意：一般主题中都留有常见第三方key、id之类的输入口，找到之后将内容填上即可 hexo中多个标签的使用123456789tages: [标签1,标签2,...标签n]或tages: - 标签1- 标签2...- 标签n 检查，部署一下是否成功]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中好用的软件]]></title>
    <url>%2F2018%2F05-25%2FMac%E4%B8%AD%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Mac中的软件 Mac常用软件 上文已经有了部分的软件，本篇是记录后续添加的 系统辅助工具类ShadowsocksX-NG 上网辅助工具，Shadowsocks改进类 GhostSKB 切换App时自动切换设置好的输入法 Dash 文档查看神器，开发人员的好辅助 Magnet 窗口控制器，快捷键来回移动切换窗口视图 JieTu 截图工具（截屏、录屏、识别），腾讯出品。有了它可以把QQ/微信等软件自带的截图给取消掉 Paste 剪切板增强管理工具，Alfred也带有剪切板功能但似乎存储的数据有限 Bartender 菜单栏图标管理工具，可以设置图标隐藏显示 Vanilla Bartender同类型工具，使用比Bartender简单 TinyCal 日历小软件，点击图标弹出日期表，可以显示农历 SwitchHosts 是一个管理、切换多个 hosts 方案的工具。 它是一个免费开源软件 Bandwidth+ 统计Mac的流量，显示网速 编辑类Sublime Text 是一款商业化的Mac文本编辑器。但是，它提供了一个不限时的评估版本，使之在实践中是免费的。 Sublime Text拥有超级友好的界面，有22种不同的主题可供选择。在其众多有趣功能当中有一项被称为免分心模式，在该模式下，屏幕中心只包含文本。 其他的功能包括建立在简单的JSON文件基础之上的高级定制功能；以及分割编辑，也即编辑能够在两个不同的文件或一个文件的不同部分之间完成。 MWeb markdown文本编辑器（收费），比Mou／MacDown等免费产品功能要多，主要颜值看着舒服 Komodo Edit 是一款开放源代码的免费Mac版文本编辑器，用户界面十分友好，无论是编写代码还是进行其他编辑都十分便捷。这款应用拥有若干有用的编辑工具，如追踪更改，自动完成，多节，皮肤和图标设置，以及减码查看器 Brackets 是一款开放源代码的免费文本编辑器，最初由Adobe Systems予以创建，目前在GitHub上进行维护。它自从2014年开始提供给用户使用并且定期进行更新。此Mac版文本编辑器以HTML，CSS和JavaScript进行编写。它是跨平台的网页开发软件。 UltraEdit UltraEdit的突出之处在于其功能的多重性，这些功能对于开发非常有帮助。这些功能包括很多编辑工具，如通过宏和脚本自动控制，可配置语法高亮显示，代码折叠，文件类型转换，正规表达式的寻找和替换，列编辑模式，统一码和十六进制编辑模式。UltraEdit不仅功能十分强大，其API界面的表现也是可圈可点 Atom 是一款免费且开源的文本编辑器，github出品。以Node.js进行编写，并嵌于GitControl中。它可以作为单纯的Mac文本编辑器使用，也可以作为源代码编辑器来使用。通过插件程序的使用，此应用支持很多语言，如HTML, CSS, C/C++, Objective-C, Java, Go, C#, JavaScript, Python, PHP, Perl, XML, Mustache, Clojure, Ruby等等，使之成为了现代开发人员的有用工具。 远程类工具TeamViewer 远程支持、远程访问、在线协作和会议 AirDroid 多平台互通工具，PC操控Android，Android中的电话、短信等通知在PC中显示。Android投屏到PC Chrome中好用的插件 Adblock Plus： Adblock Plus 是超过 5 亿次下载的全球最受欢迎的广告拦截软件之一 广告终结者： 清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码，视频广告。让你浏览网页更快更清爽。广告终结者，你唯一需要的广告插件 Evernote Web Clipper： 印象笔记剪藏工具 Octotree： github中tree的形式显示文件目录 Proxy SwitchyOmega： 轻松快捷地管理和切换多个代理设置 Tampermonkey： 油猴，脚本管理工具 Vimium： 键盘操作浏览器 捕捉网页截图 - FireShot的： 捕捉网页截图，编辑并将它们保存为PDF，JPEG，GIF，PNG或BMP；上传，打印，在Photoshop中打开，复制到剪贴板或电子邮件 有道云笔记网页剪报： 有到云笔记剪藏工具，一键保存精彩网页，多终端同步，永久珍藏]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hue的安装与使用]]></title>
    <url>%2F2018%2F05-24%2FHue%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[hue 3.9 简介Hue是Cloudera开源的一个Hadoop UI，由Cloudera Desktop演化而来。面向用户提供方便的UI用于平时的Hadoop操作中。Apache Ambari面向的是管理员，用于安装、维护集群，而不是使用集群。两者针对的是不同需求 安装 hue官方文档：http://cloudera.github.io/hue/latest/admin-manual/manual.html#installation hue github 仓库地址：https://github.com/cloudera/hue Maven &amp; Ant的安装配置Linux中安装Maven &amp; Ant 依赖安装1yum -y install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel 注：以上命令可依次安装，Linux可正常连接网络 下载hue cdh5版下载http://archive.cloudera.com/cdh5/cdh/5/注：选择下载与自己使用Hadoop 生态包相匹配的包。CDH版的不同版本生态包做过适配处理，减少不同安装包版本冲突。 将hue-3.9.0-cdh5.10.1.tar.gz 下载到 /opt/soft 目录下 安装解压安装包1[root@test soft]# tar zxvf hue-3.9.0-cdh5.10.1.tar.gz -C ../modules 将解压到/opt/modules 目录下 编译源码包cd /opt/modules/hue-3.9.0-cdh5.10.1 1[root@test hue-3.9.0-cdh5.10.1]# make apps 编译会需要一段时间,编译速度取决于网速。此阶段没有出错就表明安装成功 /opt/modules/zookeeper-3.4.5/bin/zkServer.sh start 配置hue1234567secret_key=jFE93j;2[290-eiw.KEiwN2s3['d;/.q[eIW^y#e=+Iei*@Mn&lt;qW5ohttp_host=0.0.0.0http_port=8888server_user=rootserver_group=rootdefault_user=rootdefault_hdfs_superuser=root hdfs123fs_defaultfs=hdfs://master:9000webhdfs_url=http://master:50070/webhdfs/v1hadoop_conf_dir=/home/hadoop-2.6.0/etc/hadoop yarn12345resourcemanager_host=masterresourcemanager_port=8032resourcemanager_api_url=http://master:8088proxy_api_url=http://master:8088history_server_api_url=http://master:19888 修改时区hue 的默认时区是American/LosAngeles，需要把timezone修改成Asia/Shanghai 1time_zone = Asia/Shanghai hive123hive_server_host=masterhive_server_port=10000hive_conf_dir=/opt/hive-2.0.0/conf hbase12hbase_clusters=(Cluster|master:9090)hbase_conf_dir=/opt/hbase-1.2.2/conf 使用启动12build/env/bin/supervisor //启动命令-session关闭后，进程会结束nohup build/env/bin/supervisor &amp; //后台启动 session关闭后，进程不会结束 hue管理页面访问地址：http://master:8888 主机名+端口名 hive使用1nohup bin/hiveserver2 &amp; //启动 hbase的使用123456bin/start-hbase.shbin/hbase-daemon.sh start thriftbin/hbase-daemon.sh stop thrifthbase thrift -p 9090 之后就可以打开hueUI页面进入到hbase中 常见问题缺少hue用户1KeyError: &quot;Couldn&apos;t get user id for user hue&quot; #27 需要创建一个hue用户 1adduser hue SecurityException1WebHdfsException: SecurityException: Failed to obtain user group information: org.apache.hadoop.security.authorize.AuthorizationException: User: root is not allowed to impersonate root (error 403) hue没用权限访问hdfs文件管理，hue中的root用户没有hdfs访问权限 启动hue设置的用户是与hdfs中的用户是区开的，想要有权限可以访问hdfs中需要在Hadoop中的配置文件中添加用户配置。 在Hadoop中的core-site.xml 中添加hue中的用户 12345678&lt;property&gt; &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt; 这个用户配置可以添加多个[可以同时配置hue、root、hadoop]，如果hue启动之后设置的默认用户是hue，则把以上代码中的配置root 改成hue 注意一下安装使用的用户，有些问题是用户权限问题导致的 参考链接： https://www.zybuluo.com/BrandonLin/note/456756 https://blog.csdn.net/m0_37739193/article/details/77963240 https://blog.csdn.net/feinifi/article/details/79418246 http://www.cnblogs.com/zlslch/p/6819622.html]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vi/vim 常用命令]]></title>
    <url>%2F2018%2F05-04%2Fvi-vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[切换命令需先按ESC键 编辑(插入)模式 123456789101112i =&gt; 插入光标前一个字符I =&gt; 插入行首a =&gt; 插入光标后一个字符A =&gt; 插入行末o =&gt; 向下新开一行，插入行首O =&gt; 向上新开一行，插入行首 移动光标12345678910111213141516171819202122232425262728293031323334353637h =&gt; 左移j =&gt; 下移k =&gt; 上移l =&gt; 右移M =&gt; 光标移动到中间行L =&gt; 光标移动到屏幕最后一行行首G =&gt; 移动到指定行，行号 -Gw =&gt; 向后一次移动一个字b =&gt; 向前一次移动一个字0 =&gt; 数字零，到本行头$ =&gt; 到本行行尾&#123; =&gt; 按段移动，上移&#125; =&gt; 按段移动，下移ctrl+d =&gt; 向下翻半屏ctrl+u =&gt; 向上翻半屏ctrl+f =&gt; 向下翻一屏ctrl+b =&gt; 向上翻一屏gg =&gt; 光标移动到文件开头G =&gt; 光标移动到文件末尾 删除1234567891011x =&gt; 删除光标后一个字符,相当于 Del X =&gt; 删除光标前一个字符,相当于 Backspacedd =&gt; 删除光标所在行,n dd 删除指定的行数 D: 删除光标后本行所有内容,包含光标所在字符 d0 =&gt; 删除光标前本行所有内容,不包含光标所在字符dw =&gt; 删除光标开始位置的字,包含光标所在字符：.,$-1d =&gt; 删除光标行到最后一行之间的内容 撤销命令123u =&gt; 一步一步撤销 Ctr+r =&gt; 反撤销 文本行移动123&gt;&gt; =&gt; 文本行右移 &lt;&lt; =&gt; 文本行左移 复制粘贴123yy =&gt; 复制当前行,n yy 复制 n 行 p =&gt; 在光标所在位置向下新开辟一行,粘贴 可视模式123v =&gt; 按字符移动,选中文本 V =&gt; 按行移动,选中文本可视模式可以配合 d, y, &gt;&gt;, &lt;&lt; 实现对文本块的删除,复制,左右移动 跳转行1:12 =&gt; 跳转到12行 搜索1/the 搜索the （如果搜索出多个匹配，可按n键到下一个,N则切换到上一个） 退出123456789wq =&gt; 保存退出q =&gt; 退出q! =&gt; 强制退出 ctrl+Z =&gt; 临时退出vim 页面 fg =&gt; 返回临时退出的页面 替换操作1234r =&gt; 替换当前字符R =&gt; 替换当前行光标后的字符 查找命令123456/: =&gt; str 查找n =&gt; 下一个N =&gt; 上一个 替换命令12345678末行模式下，将光标所在行的abc替换成123:%s/abc/123/g末行模式下，将第一行至第10行之间的abc替换成123:1, 10s/abc/123/g]]></content>
      <categories>
        <category>vi</category>
      </categories>
      <tags>
        <tag>vi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中安装Maven & Ant]]></title>
    <url>%2F2018%2F04-22%2FLinux%E4%B8%AD%E5%AE%89%E8%A3%85Maven-Ant%2F</url>
    <content type="text"><![CDATA[Linux中安装Maven 下载Maven安装包Maven apache官方下载http://maven.apache.org/bindownload.cgi阿里云镜像 下载:apache-maven-x.x.x-bin.tar.gz 到Linux 常用文件保存目录,如/home/soft 1[root@test soft]# tar zxvf apache-maven-x.x.x-bin.tar.gz -C /home/modules tar zxvf xxx -C xxxx 压缩包解压到 xxx 目录 配置环境变量[root@test modules]# vi /etc/profile 123MAVEN_HOME=/home/modules/apache-maven-3.5.3export MAVEN_HOMEexport PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin 刷新配置文件1[root@test modules]# source /etc/profile 验证12345678[root@test modules]# mvn -vApache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)Maven home: /home/modules/apache-maven-3.5.3Java version: 1.8.0_151, vendor: Oracle CorporationJava home: /home/modules/jdk1.8.0_151/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: "linux", version: "3.10.0-693.2.2.el7.x86_64", arch: "amd64", family: "unix" Linux中安装Ant 下载Ant安装包Ant apache官方下载http://ant.apache.org/bindownload.cgi 阿里云镜像 下载:apache-ant-x.x.x-bin.tar.gz 到Linux 常用文件保存目录,如/home/soft 1[root@test soft]# tar zxvf apache-ant-x.x.x-bin.tar.gz -C /home/modules tar zxvf xxx -C xxxx 压缩包解压到 xxx 目录 配置环境变量[root@test modules]# vi /etc/profile 12export ANT_HOME=/home/modules/apache-ant-1.9.11export PATH=$PATH:$ANT_HOME/bin 刷新配置文件1[root@test modules]# source /etc/profile 验证12[root@test modules]# ant -versionApache Ant(TM) version 1.9.11 compiled on March 23 2018 [root@a0 modules]# ant -versionApache Ant(TM) version 1.9.11 compiled on March 23 2018 至此，Linux中Maven，Ant成功安装]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hbase shell 中命令缺少单引号无法正常使用解决方案]]></title>
    <url>%2F2018%2F03-30%2FHbase-shell-%E4%B8%AD%E5%91%BD%E4%BB%A4%E7%BC%BA%E5%B0%91%E5%8D%95%E5%BC%95%E5%8F%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[在hbase shell 操作过程中，命令缺少了单引号时候，会出现无法正确执行的情况，如下： 出现了以上情况，往后的命令即使正确也无法执行。怎么办？ 简单粗暴的方式通常软件设置的推出快捷键方式为：CTRL+C,【有些会有列外，如无法成功退出，可搜索退出的正确快捷按键】。 退出之后，再重新进入Hbase shell 操作命令即可 遇到了无法解决问题，退出再重新打开，这是最粗暴的方式。当然了，适用范围也广。 当然了这样操作是有风险的，会导致前面未曾保存的数据丢失。需要操作者权衡利弊！ 有没有简单的，或者说自带操作？看下文…… 温柔的方式看图 非常简单的解决方案，再次输入一个’——单引号，又可以正常使用了 ps：Google找了一下，居然没有找到方案，不知道是问题太低级了，还是搜索的方式不对]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中使用SSH连接服务器中断问题]]></title>
    <url>%2F2018%2F03-28%2FMac%E4%B8%AD%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%AD%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Mac中iterm2使用SSH连接服务器时，会出现与服务器中断/无响应的问题。 主要原因是：是服务器端把空闲连接给断开了，或者是网络断开 iterm2/terminal 使用SSH命令连接服务器过程中会定时发送心跳以确定是否客服端与服务端是否连接。 客服端中设定的通信时间过长，服务端中也有这空闲一段时间后会断开远程连接的机制，两边任意一方没有通信请求，连接中断。 思路，修改客服端发送通信心跳间隔，或者修改服务器中的时间间隔。 解决方案： 修改客服端/Mac中的SSH参数 修改服务器端中的配置 客服端/Mac中修改SSH参数客服端中通过配置ServerAliveInterval来实现，在 ~/.ssh/config 中加入： ServerAliveInterval=30 1234567vi ~/.ssh/config # 新增以下内容Host * ServerAliveInterval 45 ServerAliveInterval 30 #表示ssh客户端每隔30秒给远程主机发送一个no-op包，no-op是无任何操作的意思，这样远程主机就不会关闭这个SSH会话。可根据实际情况更改时间间隔 Host * 是指任意服务IP 服务器端中的配置12345vim /etc/ssh/sshd_config# 添加/或者解除注释ClientAliveInterval 30ClientAliveCountMax 6 ClientAliveInterval表示每隔多少秒，服务器端向客户端发送心跳下面的ClientAliveInterval表示上述多少次心跳无响应之后，会认为Client已经断开。所以，总共允许无响应的时间是60*3=180秒 注：本文仅作为日常实践记录 参考文档： iTerm2中ssh保持连接不断开 iTerm2保持ssh连接不断开 mac电脑iTerm2链接linux服务器断线解决方案 Linux使用ssh超时断开连接的真正原因 解决SSH自动断线，无响应的问题]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删除ambari安装的hadoop集群]]></title>
    <url>%2F2018%2F03-27%2F%E5%88%A0%E9%99%A4ambari%E5%AE%89%E8%A3%85%E7%9A%84hadoop%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[机器环境适用于——CentOS/redhat 注：生产环境谨慎尝试 停止Ambari服务1ambari-server stop 删除hdp.repo和hdp-util.repo1234cd /etc/yum.repos.d/rm -rf hdp*rm -rf HDP*rm -rf ambari* 删除安装包12345678910111213141516171819202122232425262728293031323334353637383940414243444546用yum list installed | grep HDP来检查安装的ambari的包yum remove -y ambari-*yum remove -y postgresqlyum remove -y sqoop.noarch yum remove -y lzo-devel.x86_64 yum remove -y hadoop-libhdfs.x86_64 yum remove -y rrdtool.x86_64 yum remove -y hbase.noarch yum remove -y pig.noarch yum remove -y lzo.x86_64 yum remove -y ambari-log4j.noarch yum remove -y oozie.noarch yum remove -y oozie-client.noarch yum remove -y gweb.noarch yum remove -y snappy-devel.x86_64 yum remove -y hcatalog.noarch yum remove -y python-rrdtool.x86_64 yum remove -y nagios.x86_64 yum remove -y webhcat-tar-pig.noarch yum remove -y snappy.x86_64 yum remove -y libconfuse.x86_64 yum remove -y webhcat-tar-hive.noarch yum remove -y ganglia-gmetad.x86_64 yum remove -y extjs.noarch yum remove -y hive.noarch yum remove -y hadoop-lzo.x86_64 yum remove -y hadoop-lzo-native.x86_64 yum remove -y hadoop-native.x86_64 yum remove -y hadoop-pipes.x86_64 yum remove -y nagios-plugins.x86_64 yum remove -y hadoop.x86_64 yum remove -y zookeeper.noarch yum remove -y hadoop-sbin.x86_64 yum remove -y ganglia-gmond.x86_64 yum remove -y libganglia.x86_64 yum remove -y perl-rrdtool.x86_64yum remove -y epel-release.noarchyum remove -y compat-readline5*yum remove -y fping.x86_64yum remove -y perl-Crypt-DES.x86_64yum remove -y exim.x86_64yum remove -y ganglia-web.noarchyum remove -y perl-Digest-HMAC.noarchyum remove -y perl-Digest-SHA1.x86_64 删除快捷方式12345678910111213cd /etc/alternativesrm -rf hadoop-etc rm -rf zookeeper-conf rm -rf hbase-conf rm -rf hadoop-log rm -rf hadoop-lib rm -rf hadoop-default rm -rf oozie-conf rm -rf hcatalog-conf rm -rf hive-conf rm -rf hadoop-man rm -rf sqoop-conf rm -rf hadoop-conf 删除用户12345678910111213userdel nagios userdel hive userdel ambari-qa userdel hbase userdel oozie userdel hcat userdel mapred userdel hdfs userdel rrdcached userdel zookeeper userdel mysql userdel sqoopuserdel puppet 删除文件夹123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990rm -rf /hadooprm -rf /etc/hadoop rm -rf /etc/hbase rm -rf /etc/hcatalog rm -rf /etc/hive rm -rf /etc/ganglia rm -rf /etc/nagios rm -rf /etc/oozie rm -rf /etc/sqoop rm -rf /etc/zookeeper rm -rf /etc/flume rm -rf /etc/storm rm -rf /etc/hive-hcatalog rm -rf /etc/tez rm -rf /etc/falcon rm -rf /etc/knox rm -rf /etc/hive-webhcat rm -rf /etc/kafka rm -rf /etc/slider rm -rf /etc/storm-slider-client rm -rf /etc/spark rm -rf /var/lib/ambari*rm -rf /usr/lib/hadooprm -rf /usr/lib/hbase rm -rf /usr/lib/hcatalog rm -rf /usr/lib/hive rm -rf /usr/lib/oozie rm -rf /usr/lib/sqoop rm -rf /usr/lib/zookeeper rm -rf /var/lib/hive rm -rf /var/lib/ganglia rm -rf /var/lib/oozie rm -rf /var/lib/zookeeper rm -rf /var/tmp/oozie rm -rf /var/nagios rm -rf /tmp/hive rm -rf /tmp/nagios rm -rf /tmp/ambari-qa rm -rf /tmp/sqoop-ambari-qa rm -rf /hadoop/oozie rm -rf /hadoop/zookeeper rm -rf /hadoop/mapred rm -rf /hadoop/hdfs rm -rf /tmp/hadoop-hive rm -rf /tmp/hadoop-nagios rm -rf /tmp/hadoop-hcat rm -rf /tmp/hadoop-ambari-qa rm -rf /tmp/hsperfdata_hbase rm -rf /tmp/hsperfdata_hive rm -rf /tmp/hsperfdata_nagios rm -rf /tmp/hsperfdata_oozie rm -rf /tmp/hsperfdata_zookeeper rm -rf /tmp/hsperfdata_mapred rm -rf /tmp/hsperfdata_hdfs rm -rf /tmp/hsperfdata_hcat rm -rf /tmp/hsperfdata_ambari-qarm -rf /var/run/hadoop rm -rf /var/run/hbase rm -rf /var/run/hive rm -rf /var/run/ganglia rm -rf /var/run/nagios rm -rf /var/run/oozierm -rf /var/run/zookeeperrm -rf /var/run/spark rm -rf /var/run/hadoop rm -rf /var/run/hbase rm -rf /var/run/zookeeper rm -rf /var/run/flume rm -rf /var/run/storm rm -rf /var/run/webhcat rm -rf /var/run/hadoop-yarn rm -rf /var/run/hadoop-mapreduce rm -rf /var/run/kafka rm -rf /var/log/ambari*rm -rf /var/log/hadoop rm -rf /var/log/hbase rm -rf /var/log/flume rm -rf /var/log/storm rm -rf /var/log/hadoop-yarn rm -rf /var/log/hadoop-mapreduce rm -rf /var/log/knox rm -rf /var/log/hadoop rm -rf /var/log/hbase rm -rf /var/log/hive rm -rf /var/log/nagios rm -rf /var/log/oozie rm -rf /var/log/zookeeper 至此大部分的删除完毕，还有些没有删除干净的。再次安装会检测出来，再根据提示删除]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS-7-安装Ambari-在线安装]]></title>
    <url>%2F2018%2F03-26%2FCentOS-7-%E5%AE%89%E8%A3%85Ambari-%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[在线安装Ambari-2.6.00，安装前的准备可以看上一篇文章。本文安装的是Hortonworks版的 CentOS-7-安装Ambari-环境准备 Hortonworks官方安装文档 下载ambari.repo文件 进入到官方文档，查找到在线安装的仓库文件链接列表，选择对应的系统版本 CentOS7—— http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.0.0/ambari.repo 打开主节点a0 1234567wget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.0.0/ambari.repocp ambari.repo /etc/yum.repo.d/ 将ambari.repo 放入yum源根目录中用于安装或者wget -nv http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.0.0/ambari.repo -O /etc/yum.repos.d/ambari.repo 重新加载检查yum源1yum repolist 安装Ambari1yum install ambari-server 配置Ambari1ambari-server setup 以下为流程： 检查SELinux是否关闭，如果关闭不用操作1234Using python /usr/bin/pythonSetup ambari-serverChecking SELinux...SELinux status is 'disabled' 提示是否自定义设置 输入：y1Customize user account for ambari-server daemon [y/n] (n)? y ambari-server 账号 输入：ambari12Enter user account for ambari-server daemon (root):ambariAdjusting ambari-server permissions and ownership... 亦可不输入 检查防火墙，如果关闭则不用操作12Checking firewall status...Redirecting to /bin/systemctl status iptables.service 设置JDK 输入：31234567Checking JDK...Do you want to change Oracle JDK [y/n] (n)? y[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7[3] Custom JDK==============================================================================Enter choice (1): 3 此前环境准备中已经配置过jdk，此处选自定义， 如果上面选择3自定义JDK,则需要设置JAVA_HOME12345WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.Path to JAVA_HOME: /xxx/xxx/jdk1.8.0_152Validating JDK on Ambari Server...done.Completing setup... 查看机器中配置的JAVA_HOME， 12echo $JAVA_HOME/xxx/xxx/jdk1.8.0_152 注：如果不选择自定义，注意选择1，安装1.8的jdk 数据库配置 选择：y12Configuring database...Enter advanced database configuration [y/n] (n)? y 选择数据库类型 输入：31234567891011Configuring database...==============================================================================Choose one of the following options:[1] - PostgreSQL (Embedded)[2] - Oracle[3] - MySQL[4] - PostgreSQL[5] - Microsoft SQL Server (Tech Preview)[6] - SQL Anywhere==============================================================================Enter choice (3): 3 此前，以及安装好了mysql数据库，故选择3 设置数据库的具体配置信息，根据实际情况输入，如果和括号内相同，则可以直接回车12345Hostname (localhost): Port (3306): Database name (ambari): Username (ambari): Enter Database Password (123456): 数据库名，用户名，密码可根据自己设置的填入 提示必须安装MySQL JDBC，回车结束ambari配置12WARNING: Before starting Ambari Server, you must copy the MySQL JDBC driver JAR file to /usr/share/java.Press &lt;enter&gt; to continue. 将Ambari数据库脚本导入到数据库,如果使用自己定义的数据库，必须在启动Ambari服务之前导入Ambari的sql脚本1234#用Ambari用户（上面设置的用户）登录mysqlmysql -u ambari -puse ambari；source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql 至此Ambari配置完毕，下面则是启动Ambari服务 启动ambari启动Amabri执行启动命令，启动Ambari服务 1ambari-server start 启动成功后，在浏览器中输入主机点ip：xxx.xxx.xxx.xxx:8080进入Ambari管理页面，默认管理用户名：admin，密码：admin Ambari配置集群登陆进去后界面如下，点击安装 注：线上安装不需要修改本地源，离线安装则需要新建xxx/xxx目录，需要修改本地源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS-7-安装Ambari-环境准备]]></title>
    <url>%2F2018%2F03-25%2FCentOS-7-%E5%AE%89%E8%A3%85Ambari-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[Ambari 是什么 Ambari跟Hadoop等开源软件一样，也是Apache Software Foundation 中的一个项目， 并且是顶级项目。就Ambari的作用来说，就是创建、管理、监视 Hadoop 的集群，但是这里的Hadoop是广义，指的是Hadoop整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等），而并不仅是特指 Hadoop。用一句话来说，Ambari 就是为了让 Hadoop以及相关的大数据软件更容易使用的一个工具。 说到这里，大家就应该明白什么人最需要 Ambari了。那些苦苦花费好几天去安装、调试 Hadoop 的初学者是最能体会到 Ambari 的方便之处的。而且，Ambari 现在所支持的平台组件也越来越多，例如流行的 Spark，Storm 等计算框架，以及资源调度平台 YARN 等，我们都能轻松地通过 Ambari 来进行部署。 Ambari 自身也是一个分布式架构的软件，主要由两部分组成：Ambari Server 和 Ambari Agent。简单来说，用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件；Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server，最终这些状态信息会呈现在 Ambari 的 GUI，方便用户了解到集群的各种状态，并进行相应的维护。 目前网上能找到两个发行版：一个是Apache的Ambari，另一个是Hortonworks的，两者区别不大 Apache的Ambari官网 Hortonworks的Ambari中文官网，Ambari官网 安装前的准备大于3台的服务器(虚拟机中的亦可)——最好Linux系统。如：a0，a1，a2，a0为主节点，a1、a2为从节点。主节点的机器配置最好高一些。 本文假设准备好了3台服务器，都为新安装的CentOS 7系统。 前期准备：（每个节点机器都需要配置） 每个节点上配置jdk 设置主机名 相互添加IP地址映射，优化DNS 节点间SSH的无密码登录 设置网络静态IP（虚拟机中设置是为了防止每次开机ip出现动态变化） 同步时间NTP 关闭防火墙、selinux 关闭transparent_hugepage Python版本要大于或等于2.6（CentOS 7内置版本2.7） 设置最大打开文件数ulimit 配置umask 主节点安装mysql/mariadb 每个节点上配置jdk下载好jdk包，解压到服务器中/xxx/xxx 目录，解压后配置好环境变量 12345678vi /etc/profileexport JAVA_HOME=/xxx/xxx/xxxexport PATH=$JAVA_HOME/bin:$PATH保存退出，source /etc/profile 设置主机名，关闭防火墙,关闭SELinuxCentOS 7设置hostname 相互添加IP地址映射，优化DNS，节点间SSH的无密码登录Linux多个虚拟机SSH免密码通信的配置 设置网络静态IP虚拟机网络静态IP 同步时间NTP12345678yum install ntpsystemctl is-enabled ntpdsystemctl enable ntpdsystemctl start ntpdntpdate time1.aliyun.comcrontab e 30 02 * * * ntpdate time1.aliyun.com 关闭transparent_hugepage123456789101112131415161718192021222324查看transparent_hugepage状态cat /sys/kernel/mm/transparent_hugepage/defrag[always] madvise never # 表示开启cat /sys/kernel/mm/transparent_hugepage/enabled[always] madvise never # 表示开启vi /etc/rc.d/rc.local #在文末添加if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled fi if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never &gt; /sys/kernel/mm/transparent_hugepage/defragfi保存后退出chmod +x /etc/rc.d/rc.local 赋予chmod +x /etc/rc.d/rc.local文件执行权限重启系统再查看状态cat /sys/kernel/mm/transparent_hugepage/defragalways madvise [never] # 表示关闭cat /sys/kernel/mm/transparent_hugepage/enabledalways madvise [never] # 表示关闭 设置最大打开文件数ulimit123ulimit -Snulimit -Hn # 如果最大数小于10000 则重设ulimit -n 10000 配置umaskUMASK (用户掩码或用户文件创建掩码) 设置在 Linux 计算机上创建新文件或文件夹时授予的默认权限或基本权限。大多数 Linux 发行将022设置为默认的 umask 值。umask 值022授予对新文件或文件夹的读取、写入、执行权限755。umask 值027授予对新文件或文件夹的读取、写入、执行权限750umaks # 如果不是0022，则执行以下语句 1echo umask 0022 &gt;&gt; /etc/profile 主节点安装mysql/mariadb123456789101112131415161718192021yum install mariadb-serveryum install mysql-connector-java # 安装jdbc驱动systemctl start mariadbsystemctl enable mariadb #启动mysql_secure_installation # 数据库初始化设置#首先是设置密码，会提示先输入密码Enter current password for root (enter for none):&lt;–初次运行直接回车#设置密码Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车New password: &lt;– 设置root用户的密码Re-enter new password: &lt;– 再输入一次你设置的密码#其他配置Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车#初始化MariaDB完成，接下来测试登录，输入密码能正常登陆就完成了 创建ambari数据库，用户 123456mysql -uroot -p #连接数据库mysql&gt; create database ambari character set utf8 ; mysql&gt; CREATE USER 'ambari'@'%'IDENTIFIED BY '123456';mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'ambari'@'%';mysql&gt; FLUSH PRIVILEGES; 如果要安装Hive，再创建Hive数据库和用户 再执行下面的语句： 1234mysql&gt; create database hive character set utf8 ; mysql&gt; CREATE USER 'hive'@'%'IDENTIFIED BY '123456';mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'hive'@'%';mysql&gt; FLUSH PRIVILEGES; 至此，Ambari的准备工作就完成了 注：如果要在云上面搭建，一定要选择相同的地区，地域打击。主从节点在同一个地区！否则会出现IP连接上的错误]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mosh优化SSH连接卡顿问题]]></title>
    <url>%2F2018%2F03-13%2FMosh%E4%BC%98%E5%8C%96SSH%E8%BF%9E%E6%8E%A5%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在使用SSH连接远程服务器时，因为网络等原因会产生卡顿，导致使用非常不爽。网上找到一个解决方案Mosh，本文记录一下使用过程。 Mosh是什么 Mosh官网，是一个替代SSH的免费软件，它最大的特点是支持网络漫游和间歇性连接。 会话的中断不会导致当前正在前端执行的命令中断，相当于你所有的操作都是在screen命令中一样在后台执行 会话在中断过后，不会立刻退出，而是启用一个计时器，当网络恢复后会自动重新连接，同时会延续之前的会话，不会重新开启一个 Mosh安装 Mosh使用需要在服务端、客户端分别安装Mosh工具，才能使用 Mac安装1brew install mosh Linux安装123456789101112# Debian、Ubuntu 和Mint 类似的系统中，你可以很容易地用apt-get包管理器安装 apt-get update apt-get install mosh# 在基于RHEL/CentOS/Fedora的系统中，要使用yum包管理器安装mosh，你需要打开第三方的EPEL yum update yum install mosh # 在Fedora 22+的版本中，你需要使用dnf包管理器来安装Mosh dnf install mosh Mosh使用 简单的使用，用mosh连接Linux服务器 12345mosh root@xxx.xxx.xxx.xxx输入密码后就连接成功了,使用之后你会发现卡顿消失了输入exit则退出连接 以上是简单的使用，还有进阶版的使用，指定端口等。具体看官方文档，参考如下： 1sudo iptables -I INPUT -p udp --dport 60001 -j ACCEPT 服务端开启60001端口，提供客服端访问，客服端访问参考如下： 123mosh -p 60001 用户名@ip地址p 参数用于指定 UDP 端口 如果连接不成功，可能是防火墙有关端口的问题。 mosh可以结合tmux一起使用，效果会更佳 参考链接： 官方网站： https://mosh.org/ https://meiriyitie.com/2015/05/28/mosh/ https://www.hi-linux.com/posts/23118.html http://blog.sciencenet.cn/blog-935970-856971.html https://linux.cn/article-6262-1.html]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mac</tag>
        <tag>mosh</tag>
        <tag>iterm2</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7设置hostname，关闭防火墙]]></title>
    <url>%2F2018%2F03-13%2FCentOS-7%E8%AE%BE%E7%BD%AEhostname%EF%BC%8C%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[Cent OS 6与CentOS7许多命令有些区别 设置hostname 查看主机名相关的设置: 1234567891011[root@test]# hostnamectl Static hostname: a0 Icon name: computer-vm Chassis: vm Machine ID: 01def7c99eb943af9f28735310ffc0f9 Boot ID: b9e7b57216764c13a9a3bac5a3fc7284 Virtualization: vmware Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-693.el7.x86_64 Architecture: x86-64 在CentOS中有对主机名有三种定义：static[静态]、transient[瞬间]、pretty[灵活] static：主机名也称为内核主机名，是系统在启动时从/etc/hostname自动初始化的主机名 transient：主机名是在系统运行时临时分配的主机名，例如，通过DHCP或mDNS服务器分配 注：静态主机名和瞬态主机名都遵从互联网域名同样的字符限制规则 pretty：主机名则允许使用自由形式（包括特殊/空白字符）的主机名，以展示给终端用户 查看hostname12345678[root@test]# hostnamectl --static # 查看静态主机名test[root@test]# hostnamectl --pretty # 查看灵活主机名test[root@test]# hostnamectl --transient # 查看瞬间主机名test 同时修改所有主机名12345678[root@test]# hostnamectl set-hostname test1查看主机名[root@test]# hostnamectl --pretty # 查看灵活主机名test1[root@test]# hostnamectl --transient # 查看瞬间主机名test1 修改特定主机名12[root@test]# hostnamectl --static set-hostname test2 #将static改为pretty、transient即修改特定的主机名 注：上文的修改并不会立刻出现变化，需要注销用户重新登陆或者重启机器 防火墙相关 1234567[root@test]# systemctl stop firewalld.service #停止firewall[root@test]# systemctl disable firewalld.service #禁止firewall开机启动[root@test]# systemctl restart iptables.service #重启防火墙使配置生效[root@test]# systemctl enable iptables.service #设置防火墙开机启动 关闭SELinux SELinux(Secure Enhanced Linux)安全增强的Linux是由美国国家安全局NSA针对计算机基础结构安全开发的一个全新的Linux安全策略机制。就是管理Linux的安全机制。 大多数情况SELinux都是关闭的。多数情况是没有专门的运维，或者运维懒；另一个方面就是管理设置麻烦。 对于非商业性质使用来说，选择关闭是最为便捷的选择，否则许多软件使用会出现安全机制问题。 查看SELinux状态12345678910[root@test]# sestatusSELinux status: enabledSELinuxfs mount: /sys/fs/selinuxSELinux root directory: /etc/selinuxLoaded policy name: targetedCurrent mode: enforcingMode from config file: enforcingPolicy MLS status: enabledPolicy deny_unknown status: allowedMax kernel policy version: 28 修改/etc/sysconfig/selinux并关闭1234567[root@test]# vi /etc/sysconfig/selinux # 编辑/etc/sysconfig/selinux 文件,将文件中的SELINUX=enforcing改为SELINUX=disabled 修改后保存退出[root@test]# setenforce 0 注：修改文档后需要重启机器才能生效 重启之后，可再次查看selinux状态， 12[root@test]# sestatusSELinux status: disabled 出现以上则selinux关闭成功。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Anaconda的安装与使用]]></title>
    <url>%2F2018%2F02-08%2FAnaconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Python版本过多，来回切换会不太方便。尽管Python管理的工具（如：pyenv）会有很多，但Anaconda却是最为全面的。 Anaconda的优点： Anaconda跨平台，Linux、Mac、Windows都支持 提供包管理功能，支持许多Python依赖包的使用与管理 提供环境管理的功能，类似Virtualenv 解决了多个Python版本共存的问题 下载 Anaconda官网 选择符合自己平台的版本下载Linux/Mac/Windows。官网下载的速度相对于国内会比较慢清华镜像下载页面下载会快些 包含了Anconda的各个平台的历史版本，选择自己所需要的版本下载,如下图 安装 安装，软件安装是最简单的。打开安装包，然后根据提示下一步即可。如果有不会的，可以查看官方文档，入口如下图所示。 使用 Anaconda安装好后会默认添加好环境变量，打开Terminal运行conda，如果无法运行，则需要先添加Anaconda环境变量。 打开.bashrc or .bash_profile或者其它配置文档，在文末尾添加如下： 1export PATH="/xxx/bin:$PATH" # Anaconda安装的目录 source刷新一下环境变量即可使用 常用操作 Anaconda的常用命令–环境管理123456789101112131415161718192021222324252627282930313233343536373839# conda的常用操作，详细的可使用 -h 命令查看conda info -e #查看已经安装的的环境# 创建名为env1，版本为3.6的Python环境conda create --name env1 python=3.6 # 创建名为env2，版本为2.7的Python环境conda create --name env2 python=2.7# 进入新建立的环境source activate env1 # env1为环境名或conda activate env1# 退出当前环境source deactivate # 退出，进入即实现了不同环境版本的切换或conda deactivate # 删除env1环境conda env remove -n env1 或conda remove --name env1 --all# 重命名#将env1 环境名改为env00conda create --env00 --clone env1 # 将env1的删除，即实现了环境的重命名conda remove --name env1 --all conda包管理12345678910111213141516171819202122232425262728# 更新Pythonconda update python# 更新Anaconda应用conda update anaconda# 更新condaconda update conda # 查看已经安装的包conda list# 安装包conda install matplotlib# 更新包conda update matplotlib# 删除包conda remove matplotlib 好了，Anaconda的安装与基本使用介绍完毕；也可以使用它的图形页面。更多的功能等着你去发现，欢迎交流学习]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iterm2卡顿问题]]></title>
    <url>%2F2018%2F02-07%2Fiterm2%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[解决zsh使用时可能卡顿git原因zsh 使用git时可能会卡顿，原因是oh-my-zsh主题会自动获取git信息123git config --add oh-my-zsh.hide-dirty 1 # 禁止自动获取git信息git config --add oh-my-zsh.hide-dirty 0 # 恢复默认 日志过多Apple System Log（asl）系统日志过多也会影响iterm2开启的速度 系统日志会在 /private/var/log/asl 目录中 查看 /private/var/log/asl 大小的情况 1du -sh /private/var/log/asl -- 查看文件所占磁盘的大小 如果文件过大，将该文件夹下日志文件清空即可 1sudo rm /private/var/log/asl/*.asl 替换iterm2/terminal 启动的shell将startup shell 从默认的 /usr/bin/login 改为 /bin/bash -l 或者 /usr/bin/zsh ，Terminal 和 iTerm 2 就可以秒开了 iterm2: 修改 Preferences → Startup: 从 Default login shell 改为 /bin/bash -l terminal：修改 Preferences → Profiles → General → Command: 从 Login Shell 改为 /bin/bash -l 参考链接：https://superuser.com/questions/31403/how-can-i-speed-up-terminal-app-or-iterm-on-mac-osx]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iterm2配置]]></title>
    <url>%2F2018%2F02-07%2Fiterm2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[iterm2简单的配置本篇主要介绍iterm2的一些配置，以及搭配homebrew的使用 homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程 安装homebrew打开terminal(终端),输入以下命令安装 homebrew 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 卸载homebrew1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)" 安装homebrew－cask12brew install caskroom/cask/brew-caskbrew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup // 更新 使用homebrew／homebrew－cask安装软件12345brew cask install google-chrome // 安装 Google 浏览器brew cask/ install 软件名安装前可以先查看一下是否有该软件brew cask info 软件名brew cask uninstall 软件名 卸载 还有其它的一些命令，具体可以看帮助 brew安装iterm2安装iterm21brew cask install iterm2 安装oh-my-zsh1curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh 如果有遇到乱码的请再安装一下Menlo-Powerline or Monaco-Powerline字体补丁 安装好oh my zsh后，在~/.zshrc中添加如下内容，能让你用的更便捷 123456ZSH_THEME="agnoster" #使用 agnoster 主题，很好很强大DEFAULT_USER="你的用户名" #增加这一项，可以隐藏掉路径前面那串用户名plugins=(git brew node npm zsh-autosuggestions zsh-syntax-highlighting zsh-completions) #自己按需把要用的 plugin 写上zsh-completions # 命令提示zsh-syntax-highlighting #语法高亮 基本的一些配置都有了，往后可根据自己喜好再行探索增加设置 配置完成后，记得刷新环境变量source ~/.zshrc Mac中的环境变量在zsh中无效的问题oh-my-zsh 安装默认不会假装系统shell中配置的环境，在使用过程中可能会发现之前配置好的软件环境无法使用。原因是zsh 中未加载系统中的配置的环境文件,如下所示： 12# If you come from bash you might have to change your $PATH.# export PATH=$HOME/bin:/usr/local/bin:$PATH .zshrc 配置文件中，默认是关闭掉的，将注释#删除即可，删除后再刷新一下.zshrc或者重启一下iterm2即可 即使解除掉注释还是可能会发生无效的，解决办法就是引用一下Mac中配置环境变量的配置文件，如过是在~/.bash_profile 配置的 123# 在.zshrc 文末尾添加source ~/.bash_profile 刷新.zshrc 即可]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中安装nvm]]></title>
    <url>%2F2018%2F01-23%2FMac%E4%B8%AD%E5%AE%89%E8%A3%85nvm%2F</url>
    <content type="text"><![CDATA[最近使用hexo时，总提示配置警告，追踪排查发现是node引起的错误。查看配置文件，替换配置文件，或者重新安装一下node，最后重装解决了问题。那么问题是怎么引起的呢？本文记录一下过程。 问题起因 重装过程 Homebrew升级包情况 Mac中Homebrew是一个很好用的软件包管理工具，通过它可以简化软件安装、管理的过程。一些关于brew介绍可点击查看在搭建博客初期，由于hexo需要依赖git、node等依赖环境。本着方便的想法，于是使用brew安装了node。 在平时的使用中，经常会使用brew update更新软件。多次的更新过程下（其中也有node的升级），与hexo 产生了不兼容的过程。【hexo之前安装了一个最新版的，后面也没有再更新升级了】 由此可见，使用的项目需要及时维护，特别是在使用开发版/测试版软件时。软件更新后应及时检查相关项目，看看是否兼容，是否正常使用。在确定自己没有太多的时间解决使用出现的问题时，因该优先使用稳定版软件，使用稳定版软件会减少许多不必要的问题。 重新安装node node的版本管理工具有n、nvm；本文使用nvm安装node。吸取之前用homebrew直接安装管理node的教训，这次的思路是，先用homebrew安装nvm，再使用nvm安装管理node。 homebrew安装nvm（无法实现）在使用homebrew安装好nvm后，却在使用过程中出现了 1nvm is not compatible with the npm config "prefix" option: currently set to "/Users/fabian/.nvm/versions/node/v9.4.0" Run `nvm use --delete-prefix v9.4.0` to unset it. 根据提示解决问题，配置环境变量。再使用发现还是出现以上问题，在查找过程中发现nvm的官方文档说明中如下所示： 那么只能重新安装了 卸载已经安装nvm为了避免覆盖安装出现不兼容问题，先把原来软件环境卸载 1234567npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装 sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录 sudo rm /usr/local/bin/node #删除 node cd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链 安装nvm12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash或者wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash 配置nvm环境变量在~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc任意一个配置文件中配置一些nvm环境变量 12export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm 刷新一下环境变量，nvm –version查看一下版本 安装nodenvm的使用命令有很多，具体的可以通过help命令查看 1nvm install stable # 直接安装最新稳定版，不需要关注node的版本 如果你需要使用不同的node版本，也可以通过nvm install 版本号安装指定版本。 至此hexo所需要的环境就安装完毕，接下来就是重新部署hexo，迁移之前的环境。 安装hexohexo官网 1npm install -g hexo-cli 相关主题，如next主题官网 hexo的使用配置可以看官方文档，文中如有不足之处欢迎指出。]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客绑定域名]]></title>
    <url>%2F2018%2F01-22%2Fhexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[博客搭建有一段时间，还没有申请自己的域名。于是申请、绑定，操作，本文记录一下操作的过程。 注：搭建好后发现所有的浏览记录全部清空，访问量/访问人数从0开始。后面的同学搭建好博客后一定要记得绑定好域名。 步骤： 申请域名 添加网址解析 绑定博客 申请域名 申请网址阿里云万网—阿里云旗下品牌 如下图所示： 选择自己的喜欢，输入域名查找【如：test】 选好之后则进入购买流程，具体操作看页面提示信息【注：看看是个人需求还是企业需求，选好之后会需要提交身份信息，需要验证。我购买时页尾有优惠信息，可根据提示获取优惠】 添加网址解析 进入个人中心控制台，域名管理可看到购买域名列表，参考如下图： 进入解析页面，添加解析，如下图所示 可直接使用新手引导，如下图所示 至此网址解析搭建完毕，还可以继续优化，此处不涉及。 绑定博客 为啥还要绑定博客，添加域名网址解析时那个不算是与博客绑定吗？还需要继续配置，下面的才是重点 打开本地blog目录，进入source中。在source中创建一个CNAME文件，在文件中写入申请的域名。假设申请的为：testa.com域名 ，则在CNAME文件中填写testa.com，不需要填写其他的。 位置如下图： 创建成功后，提交到github中同步，重点！！！ 进入博客仓库setting选项中，找到Custom domain查看域名是否与自己配置的统一，不符合的需要修改成统一的。 至此，域名绑定完成，接着浏览器中输入自己的域名验证一下。 好了搭建完毕，欢迎交流学习。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中配置环境变量]]></title>
    <url>%2F2017%2F12-20%2FLinux%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Linux中可以配置环境变量的文件有许多如：/etc/profile、/etc/bashrc 、~/.bash_profile、~/.bashrc，不同的文件，加载的顺序是不同的，适用的范围也是不一样的 12345678/etc/profile （建议不修改这个文件 ）全局（公有）配置，不管是哪个用户，登录时都会读取该文件/etc/bashrc （一般在这个文件中添加系统级环境变量）全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件~/.bash_profile （一般在这个文件中添加用户级环境变量常用）每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次 加载顺序 123456789101112/etc/profile/etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。~/.bash_profile，~/.bash_login，~/.profile按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的 推荐在~/.bash_profile中配置环境变量 前提：jdk文件已经解压好了 打开jdk目录，拷贝路径 123[hadoop2@master app]$ cd jdk1.8.0_151/[hadoop2@master jdk1.8.0_151]$ pwd/home/hadoop2/app/jdk1.8.0_151 ---拷贝它 打开~/.bash_profile 12345678910111213JAVA_HOME=/home/hadoop2/app/jdk1.8.0_151CLASSPATH=$JAVA_HOME/lib:$CLASSPATHPATH=$JAVA_HOME/bin:$PATHexport JAVA_HOME CLASSPATH PATH注，其他的软件配置可如下OTHER=/xxx/xxx/xxPATH=$JAVA_HOME/bin:$OTHER/bin:$PATHexport JAVA_HOME OTHER CLASSPATH PATH 或者简单一点的如： 12export JAVA_HOME=/opt/module/jdk1.8.0_151export PATH=$PATH:$JAVA_HOME/bin 将以上配置添加其中，保存退出 刷新~/.bash_profile配置文件 1touch ~/.bash_profile 验证jdk环境变量是否配置成功 1java -version 正确输出了版本，则说明配置成功 java version “1.8.0_151”Java(TM) SE Runtime Environment (build 1.8.0_151-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux多个虚拟机SSH免密码通信的配置]]></title>
    <url>%2F2017%2F12-20%2F%E5%A4%9A%E4%B8%AALinux%E8%99%9A%E6%8B%9F%E6%9C%BASSH%E5%85%8D%E5%AF%86%E7%A0%81%E9%80%9A%E4%BF%A1%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[先假设有3个Linux虚拟机，分别命名为：master、slave1、slave2(方便区分)。并且都已经配置好了静态IP，设置好了hostname没有配置好的点击此处 IP地址与主机名映射，多个虚拟机相互映射 [root@master ~]# vi /etc/hosts IP地址与主机名映射先设置master机器 1[root@master ~]# vi /etc/hosts 如图： slave1、slave2同上 多个Linux虚拟机相互映射先编辑master，将slave1、slave2中配置的映射填写到master机器中的hosts文件，后再将master机器hosts分别拷贝到slave1、slave2机器 1[root@master ~]# vi /etc/hosts 配置结果如图： 配置slave1 1[root@slave1 ~]# vi /etc/hosts 配置结果如图： 配置slave2 1[root@slave2 ~]# vi /etc/hosts 配置结果如图： 禁用防火墙123456/etc/init.d/iptables stop ---关闭chkconfig iptables off ---关闭防火墙自动运行/etc/init.d/iptables status ---查看状态setenforce 0getenforce 查看是否关闭了 或者 1234service iptables stop ---关闭chkconfig iptables off ---关闭防火墙自动运行service iptables status ---查看状态chkconfig --list | grep iptables ---验证 master机器关闭如下： slave1、slave2操作同上 多个虚拟机SSH免密码通信的配置每台机器先生成ssh密钥master机器，先切换了常用的用户Hadoop2，root账号平时不用；所以生成的SSH免密通信也是在hadoop2账号下 12345[hadoop2@master ~]$ mkdir .ssh[hadoop2@master ~]$ ssh-keygen -t rsa (/home/hadoop/.ssh/id_rsa): (Enter键)Enter passphrase (empty for no passphrase): (Enter键)Enter same passphrase again: (Enter键) 将id_rsa.pub的密钥拷贝到authorized_keys文件中；后续要做的内容也是将其他机器id_rsa.pub拷贝到authorized_keys授权密钥中，当每个机器中都相互存好了密钥，ssh登陆时也就无需输入密码了 注：有些虚拟机无法使用ssh命令，则需要安装openssh-clients插件 1[root@master ~]# yum -y install openssh-clients slave1、slave2机器同上 相互拷贝id_rsa.pub相互拷贝id_rsa.pub确保每一台机器中authorized_keys都有各自密钥 先将slave1中的id_rsa拷贝到master中authorized_keys 1[hadoop2@slave1 .ssh]$ cat id_rsa.pub | ssh hadoop2@master 'cat &gt;&gt; ~/.ssh/authorized_keys' slave2机器需要如同slave1中同样的操作。此时master机器authorized_keys便有了所有机器的id_rsa.pub 或者（此方法的优点是简化了拷贝命令） 12345678910111213在每个机器中生成id_rsa.pub后，master、slave1、slave2在master机器中运行ssh-copy-id slave1ssh-copy-id slave2slave1 ssh-copy-id slave2ssh-copy-id master……让该机器中的authorized_keys存储需要免密链接的机器id_rsa.pub；执行完毕之后可以直接验证免密登陆 将master中的authorized_keys分发到其他机器12[hadoop2@master .ssh]$ scp -r authorized_keys hadoop2@slave1:~/.ssh/[hadoop2@master .ssh]$ scp -r authorized_keys hadoop2@slave2:~/.ssh/ 验证是否可以免密码通信12[hadoop2@master .ssh]$ ssh slave1 -- ssh 加配置的主机名在其他机器中也可以验证 注：连接成功后，如需退出通信，则输入exit]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Linux虚拟机自定义分配磁盘]]></title>
    <url>%2F2017%2F12-20%2F%E5%AE%89%E8%A3%85Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%85%8D%E7%A3%81%E7%9B%98%2F</url>
    <content type="text"><![CDATA[安装CentOS6.5自定义分配磁盘，虚拟机默认的磁盘大小为20G，内部分配也是默认的。为了避免出现磁盘不足情况，故将虚拟机磁盘大小扩展到36G，并自定义内部磁盘分配 Mac中VM与Windows中VM的前期选择镜像文件，修改磁盘大小会有些许差别。 注：磁盘分区时，要好好考虑那个目录下会经常使用，比如/home目录会经常使用，就多分配点空间；下文的数字仅供参考，请根据自己实际需求分配空间 以上为自定义分配磁盘的Linux安装流程，默认安装的流程可看Mac中vm安装Linux-Centos6.5]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下配置VM中Linux-CentOS6.5虚拟机网络静态IP]]></title>
    <url>%2F2017%2F12-19%2FMac%E4%B8%8B%E9%85%8D%E7%BD%AEVM%E4%B8%ADLinux-CentOS6-5%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%99%E6%80%81IP%2F</url>
    <content type="text"><![CDATA[在CentOS中，每次开机其IP都是动态变化的；为了方便的使用shell，故对CentOS虚拟机配置静态IP。本文讲述的是在Mac端的VM虚拟机，Windows下虚拟机配置是一样的，差别在于虚拟机的网络查看、配置不一样 首先查看VM虚拟机可以配置IP的数字范围 1cat /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf 滑动到最后，如下图所示  通常静态IP配置的范围为xxx.xxx.xxx.128–xxx.xxx.xxx.254；每次CentOS开机时动态IP变动的范围也是在这区间。 设置首先打开配置文件，必须是root账号才有权限编辑 1[root@master ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 显示如下： 1234567DEVICE=eth0HWADDR=00:0C:29:6F:3E:46TYPE=EthernetUUID=8cda677d-9ef1-48fd-86c8-3110c26ba046ONBOOT=yesNM_CONTROLLED=yesBOOTPROTO=dhcp 首先1BOOTPROTO=dhcp ----&gt; BOOTPROTO=static 再将HWADDR的值与虚拟机中网络配置的Mac统一，以虚拟机中网络配置的Mac值为准1HWADDR=00:0C:29:6F:3E:46 添加其他配置12345678910111213DEFROUTE=yesPEERDNS=yesPEERROUTES=yesIPV4_FAILURE_FATAL=yesIPV6INIT=noNAME="System eth0"IPADDR=172.16.164.131 ---配置的IP地址BCAST=172.16.164.255 ---广播地址，xx.xx.xx.255前面的数字参照IP前面，GATEWAY=172.16.164.2 ---网关地址为上文查看中的数值NETMASK=255.255.255.0 ---子网掩码DNS1=172.16.164.2 ---同上DNS2=8.8.8.8 至此静态网络IP设置完毕 重启网络服务并检验重启网络服务123/etc/init.d/network restart或service network restart 查看输出信息，全部为OK则重启成功 注：DEVICE=eth0的值为唯一，有冲突时可设为eth1，eth2……依次上推 检验网络1234567一、curl www.baidu.com二、电脑中ping虚拟机的IP，信息联通则表示成功；或者互相ping ip 设置hostname便于在shell中区分多台Linux机器123456789101112[root@master ~]# hostname ---查看master[root@master ~]# hostname xxx ---设置[root@master ~]# hostnamexxx以上只是临时设置，如若需要永久生效需：[root@master ~]# vi /etc/sysconfig/network修改其中的HOSTNAME=xxx 如将master改为test。保存退出再重新加载生效[root@master ~]# hostname test IP地址与主机名的映射123[root@master ~]# vi /etc/hostsxxx.xxx.xxx.xxx master ---master与上文中查看的hostname相统一 如图： 编辑，保存后，再重启检查ifconfig，如果IP地址跟设置的一样，则表明设置成功。 注：VM中一个Linux虚拟机创建成功后，还需要多个同样类型的虚拟机。 先将虚拟机关机，然后再选择虚拟机创建完整克隆。创建成功后多个同样配置的虚拟机便创建成功。比起重新安装要迅速许多。 需要注意的是，克隆的虚拟机中网络配置的数值可能会一样【比如：DEFROUTE、HWADDR】。 DEFROUTE的值可以自行设置，HWADDR需要的MAC值可再虚拟机关闭的时候，选择虚拟机设置——网络适配器——高级选项 MAC旁有一个生成，可重新生成新的MAC值；生成之后再将数值填入到HWADDR即可。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中vm安装Linux-Centos6.5]]></title>
    <url>%2F2017%2F12-19%2FMac%E4%B8%ADvm%E5%AE%89%E8%A3%85Linux-Centos6-5%2F</url>
    <content type="text"><![CDATA[软件环境：vm10，CentOS6.5，Mac。注：文中用红色框圈起来的，表示需要注意，或点击到下一页 软件默认配置的磁盘大小为20G，需要调大的可先看文末 注：安装Linux虚拟机默认的磁盘大小为20G，安装完之后再添加磁盘回比较麻烦。而在系统没有安装的时候就调整磁盘无疑是最为便捷的。如果在此处不能够调整，可以将一下的步骤添加的上文任意步骤中。越早越好]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux创建用户群组,用户]]></title>
    <url>%2F2017%2F12-19%2FLinux%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E7%BE%A4%E7%BB%84-%E7%94%A8%E6%88%B7%2F</url>
    <content type="text"><![CDATA[创建用户群组添加用户群组1234567[root ~]# groupadd 选项 用户组 常用的选项有： -g GID 指定新用户组的组标识号（GID） -o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同如：[root ~]# groupadd group1 --创建群组group1,选项可以不指定 查看用户群组1234[root ~]# cat /etc/group或：[root ~]# cat /etc/passwd |awk -F [:] '&#123;print $4&#125;' |sort|uniq | getent group |awk -F [:] '&#123;print $1&#125;' 修改用户群组123456789[root ~]# groupmod 选项 用户组常用的选项有：-g GID 为用户组指定新的组标识号。-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。-n新用户组 将用户组的名字改为新名字如：[root ~]# groupmod -n group1 group2 --将group1改为group2 删除用户群组123groupdel 用户组如：[root ~]# groupdel group1 用户创建用户123456789101112131415161718192021useradd 选项 用户名选项:-c comment 指定一段注释性描述-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录-g 用户组 指定用户所属的用户组-G 用户组，用户组 指定用户所属的附加组-s Shell文件 指定用户的登录Shell-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号用户名:指定新账号的登录名如1：[root ~]# useradd user1 --创建用户[root ~]# passwd user1 --创建密码如2：[root ~]# useradd -g group1 user1 --新建user1用户并增加到group1工作组 查看所有用户1[root ~]# cat /etc/passwd |awk -F \: '&#123;print $1&#125;' 修改用户12345usermod 选项 用户名选项的意义与创建用户的选项一致[root ~]# usermod -g group2 user1 --将user1的群组改为group2 删除用户123userdel 选项 用户名[root ~]# userdel -r user1 ---常用的选项是 -r，它的作用是把用户的主目录一起删除 passwd123456789101112passwd 选项 用户名可使用的选项：-l 锁定口令，即禁用账号。-u 口令解锁。-d 使账号无口令。-f 强迫用户下次登录时修改口令[user1 ~] passwd ---修改当前用户user1的密码 [root ~]# passwd xxx ---修改任意用户的密码]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装Python3]]></title>
    <url>%2F2017%2F12-14%2FLinux-%E5%AE%89%E8%A3%85Python3%2F</url>
    <content type="text"><![CDATA[Linux自带Python2.x版本，Python3的安装方法有多种，本文介绍安装包安装 安装开发依赖123yum -y groupinstall developmentyum -y install zlib-devel 下载Python3安装包123456789wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgztar zxvf Python-3.6.3.tgzcd Python-3.6.3./configuremake &amp;&amp; make install 跑完之后，查看python3安装位置 12345which python3显示如下：[root@ ~]# which python3/usr/local/bin/python3 表示安装成功，此时Python2与Python3都安装在系统中 使用不同python版本此时系统的默认Python版本2.x 12345pythonython 2.6.6 (r266:84292, Aug 18 2016, 15:13:37)[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 输入exit()，退出python程序 使用python3 12345python3Python 3.6.3 (default, Dec 14 2017, 19:33:57)[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)] on linuxType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; 输入exit()，退出python3程序 使用python3则运行python3命令，使用python2则运行python]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper的安装与基本操作]]></title>
    <url>%2F2017%2F12-03%2Fzookeeper%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[单机配置与集群配置检测状态的区别.集群配置的检测一定要所有的节点都启动了zookeeper程序，再运行zkServer.sh status才是会正确，否则会出现连接异常的提醒，无法检测状态 单机与集群配置zookeeper 注：单机配置zookeeper，zoo.cfg中不需要配置server.id=host:port1:port2 首先下载好zookeeper软件包(官网)，并解压 打开zookeeper.x.x文件夹 1、在根目录下创建logs，data文件夹 2、进入conf目录下，可以看到有一个zoo_simple.cfg文件，拷贝复制为一个zoo.cfg 3、配置zoo.cfg文件 12345678910ticketTime=2000clientPort=2181initLimit=10syncLimit=5dataDir=/xxx/xxx/app/zookeeper-3.4.5/datadataLogDir=/xxx/xxx/app/zookeeper-3.4.5/logsserver.1=master:2888:3888server.2=master:2888:3888server.3=master:2888:3888 上文为添加，修改的配置.说明如下： 1234567891011121314151617181920212223initLimit ZooKeeper集群模式下包含多个zk进程，其中一个进程为leader，余下的进程follower。 当follower最初与leader建立连接时，它们之间会传输相当多的数据，尤其是follower的数据落后leader很多。initLimit配置follower与leader之间建立连接后进行同步的最长时间。syncLimit 配置follower和leader之间发送消息，请求和应答的最大时间长度。tickTime tickTime则是上述两个超时配置的基本单位，例如对于initLimit，其配置值为5，说明其超时时间为2000ms * 5 = 10秒。server.id=host:port1:port2 其中id为一个数字，表示zk进程的id，这个id也是dataDir目录下myid文件的内容。 host是该zk进程所在的IP地址，port1表示follower和leader交换消息所使用的端口，port2表示选举leader所使用的端口。dataDir 其配置的含义跟单机模式下的含义类似，不同的是集群模式下还有一个myid文件。myid文件的内容只有一行，且内容只能为1 - 255之间的数字，这个数字亦即上面介绍server.id中的id，表示zk进程的id。dataLogDir配置log日志存放的目录 进入dataDir配置目录 创建一个myid的文件，文件中写入数字server.id=host:port1:port2 中的id，注意，该id与zoo.cfg中配置中的相对应。如： 123456789zoo.cfg中配置server.1=master:2888:3888server.2=master:2888:3888server.3=master:2888:3888master 主机中的myid应写入的1slave1 主机中的myid应写入的2…… 注：不需要其他的字符，ID的范围1～255 zookeeper的配置就已经完成，也可以添加环境变量。 zookeeper的操作启动进入到bin目录，所有的操作命令都在该目录下 ./zkServer.sh start 注：一定要空格，配置了环境变量的可以直接 zkServer.sh start 查看zookeeper运行状态./zkServer.sh status 注：如果是配置的集群，该集群所有的节点主机都需要启动之后再检查；单主机无需如此。 运行后会出现Mode，有两个角色一个是leader，一个是follower代表不同的身份。通常是一个leader对应多个follower，角色是随机分配的，当一个leader的主机停止之后，会有另个follower的主机变为leader身份 停止./zkServer.sh stop 测试集群的联通性./zkCli.sh -server master:2181,slave1:2181,slave2:2181 连接成功后，terminal会变成： 12WatchedEvent state:SyncConnected type:None path:null[zk:master:2181,slave1:2181,slave2:2181(CONNECTED) 0] 至此，zookeeper配置运行成功]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2x——字符串]]></title>
    <url>%2F2017%2F11-16%2FPython2x%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[Python目前的主要区别Python2与Python3，Python3有许多的优化，改版，有许多的语法使用方式与Python2有所区别。Python2x是指Python2.xx的版本，Python3则是指Python3.xx版本 什么是字符串？ 字符串就是一个个字符串成一串，也就是单个的连在一起，经常看到的如下： 123单引号的—— 'abc' , 'hello world'双引号的—— "abc" , "hello world" Python中的一般使用： 12345&gt;&gt;&gt; print 'hello python'hello python&gt;&gt;&gt; print "hello python"hello python&gt;&gt;&gt; 也可以嵌套使用： 12345&gt;&gt;&gt; print 'hello "python"'hello "python"&gt;&gt;&gt; print "hello 'python'"hello 'python'&gt;&gt;&gt; 注意输出的区别 123456789101112131415161718192021222324252627282930313233错误的示范：&gt;&gt;&gt; print "hello 'py"t"hon'" File "&lt;stdin&gt;", line 1 print "hello 'py"t"hon'" ^SyntaxError: invalid syntax正确的示范：&gt;&gt;&gt; print "hello 'py't'hon'"hello 'py't'hon'或错误的示范：&gt;&gt;&gt; print 'h"e'l'l"o' File "&lt;stdin&gt;", line 1 print 'h"e'l'l"o' ^SyntaxError: invalid syntax错误的示范：&gt;&gt;&gt; print 'he"l'lo py'th"on' File "&lt;stdin&gt;", line 1 print 'he"l'lo py'th"on' ^SyntaxError: invalid syntax正确的示范：&gt;&gt;&gt; print 'he"l"lo py"th"on'he"l"lo py"th"on正确的示范：&gt;&gt;&gt; print 'he"l"l"o p"y"th"on'he"l"l"o p"y"th"on 看看发现了什么，如果最外层用的是单引号&#39;&#39;，单引号&#39;&#39;里面嵌套的字符串需要再作引用说明时就只能是双引号&quot;&quot;。 同理亦然，最外层用了双引号&quot;&quot;，字符串中间的就只能用单引号&#39;&#39;。 也就是说在Python2中一个字符串最外层的引用符号只能出现一次！ 字符串的连接 12345678910111、&gt;&gt;&gt; print 'hello '+ " python"hello python2、&gt;&gt;&gt; print "hello "+ " python"hello python3、&gt;&gt;&gt; print 'hello '+' python'hello python 这几种都是可以的，通常为了提高代码的可读性，会统一用一种风格方式。约定好用第二种，或者第三种。不建议用第一种 其他类型转为字符串最简单的一种就是用斜引号引用 12&gt;&gt;&gt; print "No"+`1`No1 作为数字的1是不能和字符串相加的，因为两个类型不一样，同理类型不一样的时候是需要先统一类型再做处理的(整型/浮点型数据不在此类)。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux服务器于本地/服务器之间文件上传与下载]]></title>
    <url>%2F2017%2F11-13%2FLinux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%8E%E6%9C%AC%E5%9C%B0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[Terminal连接服务器一般连接服务器用到的命令ssh，打开terminal1ssh -p端口号 username@服务器ip 一般默认的端口为22，也可以简写成： 1ssh -p username@服务器ip 注意：此处的p是小写 Terminal上传文件到服务器需要用到的命令是scp 123456789scp -P端口号 本地文件路径 username@服务器ip:目的路径注意P要大写，一般默认端口是22，如：[test@admin ~] scp -P22 /Users/test/test-bin.tar.gz root@xxx.xxx.xxx.xxx:/usr/local也可以scp -rp 本地文件路径 username@服务器ip:目的路径 注：上传文件是在没有连接服务器的窗口中运行，不要在本地连接好服务器之后的窗口运行，否则会提示本地文件目录无法找到 Terminal从服务器中下载文件12345678scp -P端口号 username@ip:路径 本地路径(P 需要大些)也可以scp -rp 本地文件路径 username@服务器ip:目的路径如：[test@admin ~] scp -P22 /Users/test/test-bin.tar.gz root@xxx.xxx.xxx.xxx:/usr/local 服务器之间传输文件12345scp -rp 本地服务器文件路径 目标服务器ip:目标路径如：scp -rp /Users/test/test-bin.tar.gz root@xxx.xxx.xxx.xxx:/usr/local]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中iTerm2使用ssh连接远程服务器]]></title>
    <url>%2F2017%2F10-25%2FMac%E4%B8%ADiTerm2%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[有许多专门用于连接远程服务器的软件，其中使用的却是ssh，那在iTerm2中是否可以直接使用呢？如何使用呢？ ssh ssh是什么？这篇文章清晰的介绍了ssh，以及常用的命令：SSH原理与运用（一）：远程登录——阮一峰 http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html ssh常用命令ssh常用的命令： $ ssh user@host 详细如下 $ ssh -p 22 user@host -p后面带的是端口号，一般默认的是22，后面是用户名@主机ip； 尝试ssh连接打开Terminal或者iTerm2，输入： $ ssh user@host 会出现以下内容： 1234567891011121314151617 $ ssh user@hostThe authenticity of host 'host (xxx.xxx.xxx.xxx)' can't be established.RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d. Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'host,xxx.xxx.xxx.xxx' (RSA) to the list of known hosts.Password: (enter password)Last login: Wed Oct 25 18:48:48 2017 from xxx.xxx.xxx.xxxWelcome to Elastic Compute Service[root@4e00u53f7 ~]# 以上就是完整的示范了，那问题来了，每次连接都需要填写密码岂不是很麻烦？如果需要连接管理多个远程呢？ sshpass让iterm2保存登陆信息，无需再输入密码连接远程 iTerm2安装sshpass使用brew安装sshpass 工具： brew install sshpass 它回自动安装好sshpass工具，安装好后就可以使用了。 如果没有安装好brew可点击此处 设置好配置信息实现免密码连接保存好密码信息在自己本地文件中新建一个文件，保存所需登录的秘密。 如在/Users/test中创建一个sshpass目录／Users/test/sshpass ，再创建一个pass文件，保存登陆密码。如果你的远程端密码是123455，就写123456其他的都不需要写。 iTerm2配置profiles信息打开Preferences——&gt;Profiles 选项 如图所示，可以点击左下方的+新建一个profile。具体配置在右栏Genernal： Basic-&gt;Name：可以配置好别名 Command:选择command并在后方输入 /usr/local/bin/sshpass -f /Users/hadronw/sshpass/pass ssh -p22 root@xxx.xxx.xxx.xxx /usr/local/bin/sshpass -f 是sshpass工具执行文件路径，安装sshpass好后，默认会在这个路径 /Users/test/sshpass/pass 这个是前面配置好保存密码的路径，以便于工具读取密码 后面的就是一个连接ssh的命令了，这样就配置好了。 然后就是检验是否配置成功，打开iTerm2，鼠标右键New Wi now 说／New Tab都可以选择已经配置好的profile文件。 注意：第一次可能不会成功，第一次需要用ssh命令连接一次，它需要保存一下验证信息到本机，具体如上文的尝试连接ssh。登陆成功后就可以直接免除密码登陆了。 原理其实就是保存了一下密码，让命令自己去读区密码登陆。 关于iTerm2还有其他的功能等待着你的发掘，欢迎交流学习。 参考文章：SSH原理与运用（一）：远程登录 http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html ssh用法及命令 http://blog.csdn.net/pipisorry/article/details/52269785]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux/MacOS终端常用ls命令解读]]></title>
    <url>%2F2017%2F10-16%2FLinux%3AMacOS%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8ls%E5%91%BD%E4%BB%A4%E8%A7%A3%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[ls ls是(Linux,MacOS)等常用终端中，常用的命令； 具体的使用可以ls –help 逐一查看体验（本文只解读其中某部分） ll或 ls -l ll是 ls -l 命令的缩写，有些系统不支持ll缩写命令 ll查看目录下文件的详细信息： [root@localhost test]# ls -l /etc/sudoers -----rwxrwx. 1 root root 4002 Mar 1 2012 /etc/sudoers 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 第一个栏位 表示文件的属性：Linux的文件基本上分为三个属性：可读（r），可写（w），可执行（x） 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 如案例中第一档drwxr-xr-x 这里有十个格子（具体程序实现时，实际上是十个bit位），第一个字符为单独含义，后9个字符，每3个为一组:rwx、r-x、r-x。 分别指示此文件的读、写、执行权限，对应的权限身份为：owner、group、others 注：因为Linux是多用户多任务系统，所以一个文件可能同时被许多人使用，所以我们一定要设好每个文件的权限 第一个字符的含义：”-”,普通文件. ”d”目录,字母”d”,是dirtectory(目录)的缩写 “l”符号链接。请注意,一个目录或者说一个文件夹是一个特殊文件,这个特殊文件存放的是其他文件和文件夹的相关信息 “b”块设备文件。 “c”字符设备文件 此处drwxr-xr-x的d表明是一个目录 第一组：owner 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 以 drwxr-xr-x 为例子 对应的字符：rwx 表示使用者自己可读，可写，可执行 第二组：group 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 以 drwxr-xr-x 为例子 对应的字符：r-x 表示同一群组可读，不可写，可执行 第三组：others 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 以 drwxr-xr-x 为例子 对应的字符：r-x 表示其他用户可读，不可写，可执行 注：另外，有一些程序属性的执行部分不是X,而是S,这表示执行这个程序的使用者，临时可以有和拥有者一样权力的身份来执行该程序。一般出现在系统管理之类的指令或程序，让使用者执行时，拥有root身份。 文件的数字表示 前三组文件属性除了简单字母表示：可读（r），可写（w），可执行（x），它们还分别对应不同的数字，用不同的数字组合表示不同的命令含义。 在使用过程中,如果用字母去表示不同的权限含义，那会导致可读性，可用性大大下降；因此操作过程中，它用数字组合去代表不同的文件权限；而在展示时，则用简写字母去代替 1234567891011121314151617181920212223242526272829r -- 4 w -- 2x -- 1- -- 0如案例中文件属性：drwxr-xr-x 不同用户组文件属性rwx&#123;ower&#125; 、r-x&#123;group&#125;、r-x&#123;others&#125;用数字表示就是：421&#123;ower&#125;、401&#123;group&#125;、401&#123;others&#125;把它们组合在一起表示如下：ower = rwx = 4+2+1 = 7 group = r-x = 4+0+1 = 5others = r-x = 4+0+1 = 5如果要将案例中的文件全部改成可读、可写、可执行，则可用如下方式使用chmod -R 777 文件/目录3个数字表示不同的用户组，每个数字则表示单个用户组之中不同的属性数字和。表示为 ower，group，others： 可读、可写、可执行仅读 -- 4 &#123;r--,400,4+0+0&#125;仅写 -- 2 &#123;-w-,020,0+2+2&#125;仅执行 -- 1 &#123;--x,001,0+0+1&#125;无属性 -- 0 &#123;---,000,0+0+0&#125;仅读写 -- 6 &#123;rw-,420,&#125; 示列： 12345678910111213141516171、将文件改为仅当前用户可读chmod -R 400 文件/目录2、将文件改为仅当前用户可读、写chmod -R 600 文件/目录3、将文件改为仅当前用户，当前用户组可读chmod -R 440 文件/目录4、将文件改为仅当前用户，当前用户组可读、可写chmod -R 660 文件/目录…… 第二个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示文件个数。如果是文件的话，那这个数目自然是1了，如果是目录的话，那它的数目就是该目录中的文件个 第三个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示该文件或目录的拥有者。若使用者目前处于自己的Home,那这一栏大概都是它的账号名称 第四个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示所属的组（group）。每一个使用者都可以拥有一个以上的组，不过大部分的使用者应该都只属于一个组，只有当系统管理员希望给予某使用者特殊权限时，才可能会给他另一个组 第五个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示文件大小。文件大小用byte来表示，而空目录一般都是1024byte，当然可以用其它参数使文件显示的单位不同，如使用ls –k就是用kb莱显示一个文件的大小单位，不过一般我们还是以byte为主。 第六个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示最后一次修改时间。以“月，日，时间”的格式表示，如Oct 10 10:45表示10月10日10:45分。 第七个栏位 案例： 1 2 3 4 5 6 7 文件属性 文件数 拥有者 所属的group 文件大小 建档日期 文件名 drwxr-xr-x 4 root root 136 Oct 10 10:45 code 表示文件名。我们可以用ls –a显示隐藏的文件名。 其他 查看目录下所有文件信息，包含着隐藏文件 ls的使用方式还有许多，具体ls –help查看文档，欢迎交流 参考链接：linux ls和 ll 命令 http://blog.csdn.net/cgzhello1/article/details/7839534]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中修改文件只读权限]]></title>
    <url>%2F2017%2F10-15%2FLinux%E4%B8%AD%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%8F%AA%E8%AF%BB%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[Linux 新用户登录后，想要修改一些关键文件往往是没有权限的。怎么办？提升用户权限，以root权限去修改。 切换到root用户权限123[test@localhost ~]$ su rootPassword:[root@localhost test]# Terminal 命令行中有#就表示已经切换到了root账号，密码是之前test用户设置的那个密码 修改/etc/sudoers文件权限一般用户登录后，打开/etc/sudoers文件是只读权限，如何进入修改呢？先切换到root用户权限，再修改权限如下： 123456[root@localhost test]# ls -l /etc/sudoers-r--r-----. 1 root root 4002 Mar 1 2012 /etc/sudoers[root@localhost test]# chmod 777 /etc/sudoers[root@localhost test]# ls -l /etc/sudoers-----rwxrwx. 1 root root 4002 Mar 1 2012 /etc/sudoers[root@localhost test]# 接下来就可以用vim愉快的修改/etc/sudoers文件了 提升用户权限12345678910[root@localhost test]# vim /etc/sudoers找到## Allow root to run any commands anywhereroot ALL=(ALL) ALL并在下方参照格式增加自己用户配置## Allow root to run any commands anywhereroot ALL=(ALL) ALLtest ALL=(ALL) ALL 再保存退出，权限权限就修改好了 恢复/etc/sudoers的访问权限为440123456[root@localhost test]# ls -l /etc/sudoers-----rwxrwx. 1 root root 4002 Mar 1 2012 /etc/sudoers[root@localhost test]# chmod 440 /etc/sudoers[root@localhost test]# ls -l /etc/sudoers-r--r-----. 1 root root 4002 Mar 1 2012 /etc/sudoers[root@localhost test]# 可以切换成自己普通用户，再测试一下用户权限， 123[root@localhost test]# su test [test@localhost ~]$ vim /etc/sudoers注：可任意编辑，别删除掉了关键配置 以上操作需要熟悉一些vim的基本操作，编辑模式，如何保存、退出 【链接】linux下如何添加一个用户并且让用户获得roothttp://www.cnblogs.com/johnw/p/5499442.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10安装VMmare]]></title>
    <url>%2F2017%2F10-13%2Fwin10%E5%AE%89%E8%A3%85VMmare%2F</url>
    <content type="text"><![CDATA[win10 中安装VMware虚拟机时遇到的问题 Microsoft Runtime DLL问题在安装VMware时出现Microsoft Runtime DLL提示信息，导致无法安装。在寻找解决方案的时候，网上有几种情况： 1、权限原因导致，未能用管理员权限运行／权限不足————提升用户权限，以管理权限运行 2、电脑缺少依赖工具包————安装所需工具包 3、系统注册表中出了问题————清理注册表 4、服务中Windows install 服务相关问题————开启相关服务 5、其它解决方式——另辟蹊径————实际解决问题方式 权限问题win10系统中，系统默认的Admin用户是禁止的，需要解禁。步骤如下： 先进入计算机管理页面 注：如果计算机管理页面没有本地用户的选项，则说明系统需要升级。从普通家庭版升级到专业版或者企业版，网上搜索“win10从家庭版升级到专业版”即可 解决权限问题后，发现并不能解决问题；继续尝试问题2、3、4处理方式： 官方论坛信息注册表相关问题 缺少依赖包Visual C++ Redistributable-贴吧的说明 下载地址Visual C++ Redistributable 最终解决方案在安装VMware出现Microsoft Runtime DLL的问题时不用点击关闭程序，win+R 输入 %temp% 回车。 然后会出现一个窗口，里面有许多列表，找到一个~setup结尾的文件夹，打开进去，里面会有如下几个文件： vcredist_x64 vcredist_x86 VMwareWorkstation 将这三个文件拷贝到桌面或者其它地方，再点VMwareWorkstation即可正常安装。 安装完成后可能会出现有注册码确无法注册的情况，它提示权限不足，或者不是管理员等提示信息。 VMmare激活权限问题安装VMmare成功后，可能会出现激活的问题，解决方案： VMmare右键——程序位置如下图： 再进入到x64文件夹下面，复制这个路径： C:\Program Files (x86)\VMware\VMware Workstation\x64 再以管理员权限运行cmd，可在这个目录下找到： C:\Windows\System32 找到cmd.exe右键以管理员身份运行： cd C:\Program Files (x86)\VMware\VMware Workstation\x64 再运行： vmware-vmx.exe --new-sn xxxx-xxxx-xxxx-xxxx 后面的xxxx-xxxx 是指激活码，可购买或自行去寻找 以上是我安装VMmare遇到的问题，以及解决方案，欢迎交流学习]]></content>
      <categories>
        <category>win</category>
      </categories>
      <tags>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac/Linux安装Python多版本管理器Pyenv]]></title>
    <url>%2F2017%2F09-09%2FMac%3ALinux%E5%AE%89%E8%A3%85Python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8Pyenv%2F</url>
    <content type="text"><![CDATA[Mac OS 自带有Python 2.X版本，由于Python3.X版本有很大改动，与之前版本许多方法并不是相同的使用方式，因此会需要在电脑中安装不同的Python版本 Python的版本有许多，这里介绍一个pyenv，通过它来安装管理，切换Python版本 安装pyenv通用方法Linux/MacOS通用： 1git clone https://github.com/yyuu/pyenv.git ~/.pyenv Mac 中安装brew软件管理的可以通过brew安装 此处介绍通过homebrew安装pyenv，没有安装homebrew可以点击看安装介绍。也可以查看pyenvgithub原本说明， 1brew install pyenv 此时pyenv就安装好了，接下来是需要配置一下环境 配置环境变量12345678方式一：打开.bash_profile文件，在该文件中手动添加export PYENV_ROOT="$HOME/.pyenv"export PATH="$PYENV_ROOT/bin:$PATH"方式二：直接通过命令$ echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bash_profile$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bash_profile 接下来再配置一下Python版本切换中环境变量的相关 123456789方式一：打开.bash_profile文件，在该文件中末尾手动添加if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then eval "$(pyenv init -)"fi方式二：命令$ echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval "$(pyenv init -)"\nfi' &gt;&gt; ~/.bash_profile 添加之后切记刷新一下环境变量，命令方式： source ~/.bash_profile Mac环境变量相关可点击查看 使用pyenvpyenv命令介绍， 1234567891011commands 列出所有pyenv可用的命令local 设置或显示本地应用程序特定的Python版本global 设置或显示系统全局的Python版本shell 设置或显示shell外壳的Python版本install 使用python-build安装指定Python版本uninstall 卸载已经安装的Pythonrehash 刷新 pyenv shims (安装之后运行这个)version 查看当前使用的版本versions 列出已经安装的Python版本，当前激活版本用*号标注which 显示的完整路径的可执行文件whence 列出包含给定的可执行所有的Python版本 建议： 系统全局用系统默认的Python比较好，不建议直接对其操作 pyenv global system(不建议使用系统自带的Python版本开发或测试) 查看Python可用版本： pyenv install -l 列举版本较多，需要仔细浏览 安装Python： pyenv install xx.xx.xx (pyenv install 3.4.3) pyenv rehash # 记得一定要rehash 切换Python版本： pyenv local xx.xx.xx（3.4.3） 临时设定Python版本，退出后失效： pyenv shell xx.xx.xx（3.4.3） 取消某版本切换： pyenv local xx.xx.xx（3.4.3） --unset 优先级关系：shell——local——global 参考文章： https://www.cnhzz.com/pyenv_virtualenv_virtaulenvwrapper/ https://my.oschina.net/damienchen/blog/852006 https://github.com/pyenv/pyenv#homebrew-on-mac-os-x http://lovekaiyuan.iteye.com/blog/2214417]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac安装pip]]></title>
    <url>%2F2017%2F09-09%2FMac%E5%AE%89%E8%A3%85pip%2F</url>
    <content type="text"><![CDATA[pip是什么？pip(软件包管理系统)，著名的Python包管理工具，python安装包的工具有easy_install, setuptools, pip，distribute等。常用的有pip、easy_install。 123注：distribute是setuptools的替代品，是对标准库disutils模块的增强，我们知道disutils主要是用来更加容易的打包和分发包，特别是对其他的包有依赖的包。distribute被创建是因为Setuptools包不再维护了。而pip是easy_install的替代品。 安装pip1234567安装：sudo easy_install pip卸载：sudo pip uninstall pip 其他国外的源比较慢，这里推荐两个国内的源： 1234567#pip豆瓣源安装pip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com nltk#pip 阿里云源安装pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com nltk 本想通过brew来安装pip，结果发现无法安装，需要先用brew安装Python，用brew 安装Python后发现还是无法安装，只能另辟蹊径了。 安装pip主要用于安装虚拟机，也是用于Python使用，virtualenv、Virtaulenvwrapper需要用pip安装管理 virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够： 1、在没有权限的情况下安装新套件 2、不同应用可以使用不同的套件版本 3、套件升级不影响其他应用 Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做： 1、将所有虚拟环境整合在一个目录下 2、管理（新增，删除，复制）虚拟环境 3、切换虚拟环境 参考文献： Mac多Python版本共存，多个独立Python开发环境切换： https://www.cnhzz.com/pyenv_virtualenv_virtaulenvwrapper/ http://blog.csdn.net/liuchunming033/article/details/39578019 http://www.mamicode.com/info-detail-1312227.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基本数据类型]]></title>
    <url>%2F2017%2F09-01%2FJava%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[java的基本数据类型简介 数值型 (整数、浮点类型)java的六种基本数据类型 123456789101112整数类型：byte，short,int,long浮点类型：float、double字符型： char布尔型：boolean 数值型数据取值范围12345678910111213内存空间8位等于1字节byte (1个字节) 取值范围：&#123;-128 ~ 127 &#125;short (2个字节) 取值范围：&#123;-32768 ~ 32767&#125;int (4个字节) 取值范围：&#123;-2147483648 ~ 2147483647&#125;long（8个字节） 取值范围：&#123;-9223372036854775808 ~ 9223372036854775807&#125;float (4个字节) 取值范围：&#123;1.4E-45 ~ 3.4028235E38&#125;double (8个字节) 取值范围：&#123;4.9E-324 ~ 1.7976931348623157E308&#125; 注：定义数值型数据类型变量时，要注意变量的取值范围，超出相应范围会报错。对于long型值，若赋给的值大于int型的最大值或小于int型的最小值，则需要再数字后加L或l，表示该数值为长整型。 在默认情况下小数都被看作double型，若使用float型小数，则需要在小数后面添加F或f。 类型变量实例1234567891011byte myByte = 124;short myShort = 3245;int myInt = 1234567;long myLong = 1234556789874523;float myFloat = 12.34f;double myDouble = 12.345; 字符类型char用于存储单个字符，占两个字节内存空间。实例如下： 12345char myChar = 'a'; 字符必须用单引号，双引号时代表字符串。因为字符a在unicode 表中排序的位置是97，因此允许写成：char myChar = 97; 由于Java语言也可以把字符作为整数对待，而unicode编码采用无符号编码，且可以存储65536个字符，所以Java中的字符几乎可以处理所有国家语言文字。若想得到一个0～65536之间的数所代表的unicode表中相应位置上的字符，必须使用char型显式转换如： 1234567char c1 = 'd', c2 = '@';它们在unicode表中的顺序位置是：(int)c1,(int)c2;反之：unicode表中第97位置上的字符是：（char)97 布尔类型布尔类型又称逻辑类型，通过关键字boolean来定义布尔类型变量，只有true和false两个值，不能与整数类型进行转换。实例如下： 123456boolean b1,b2;b1 = true;b2 = false; 布尔类型通常用在流程控制中作为判断条件 以上是Java八种基本数据类型]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十大经典励志演讲]]></title>
    <url>%2F2017%2F08-19%2F%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E5%8A%B1%E5%BF%97%E6%BC%94%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[《十大经典励志演讲视频》的剪辑文字版，感兴趣的可以看视频，视频更有感染力 10、Peter Dinklage——Don’t Wait Like Me 皮特·丁拉其 别像我一样干等 在我29岁的时候，我告诉自己。无论下一个工作薪资如何，从现在起，无论好坏做一个演员。 29岁，离开了数据处理我很害怕。十年里住在一个没有暖气的地方，六年被困在一个工作里。或许我恐惧改变！我开始在一个剧组中获取一个微不足道的角色，慢慢的开始了演员生涯。 不要去寻找决定性时刻，因为它永远不会到来。决定你的时刻已经发生，也会再次发生。你只是有点迷失，但很快就会出现契机。相信我，你会找到轨道。不要想我一样等到29岁才找到它。 如果你真的等到那个时候，也行，有些人一辈子都没有找到它。但你会找到的，我保证。 世界可能告诉你，你还没有条件。我在世界上等待很长时间之后，才允许自己失败。 恳请各位，甚至不用特地的去问，不用特地的告诉世界你准备好了。展现自己，放手去干。 贝克特说什么，屡战屡败，屡败屡战，纵然失败，更加精彩。世界是你的，善待每个人，然后照亮夜晚。 9、Charlie Day——Don’t lef fear stop you 查理·戴——别让恐惧阻碍你你不能任凭对失败，对比和批判的恐惧，羁绊追逐伟大的脚步。 不冒失败的风险就不会成功，不冒受到批评的风险就无法发声，不冒受伤的风险就无法去爱。你必须要走出去直面风险，这些都不容易。 我也并非总是开心！但是你不能只做让自己开心的事情，而要做让自己更伟大的事情。做哪些即使让你难受，害怕，甚至是痛苦的，但长远来看会有回报的事情。 乐于失败，允许自己失败。以自己喜欢的方式在自己希望失败的地方失败，失败了，振作起来，然后再失败。否则，没有这些挣扎，你的成功又是什么呢？ 众所周知，我们只有这一生，在这一生中，你必须要相信自己的声音，自己的想法，诚实和脆弱。这样做你将会找到自己的道路，你不必无所畏惧，只是不要让恐惧阻止你前行！ 像这样尽你所能的去生活，我保证当你回头看时，你会看到一个圆满的人生。你能够在职业生涯中取得成就，更重要的是自我品质得到提升。追寻成功，永无止境！ 8、Steven Spielberg——Listen to the whisper 斯蒂文·斯皮尔伯格——聆听内心的低语如果你有一个梦想，而且你永远都不知道能否实现。 梦想常常从背后来袭，让你出其不意，而不是从你前面降临。 如果你有一个梦想，它往往不会朝你喊叫：你是这样的，会这样度过一生。 很多的时候，它都是轻声细语。我时常对孩子说，最难听进去的声音就是内心的冲动，它一直在你耳边低语，从不大声喧哗，很难听见。 因此你必须每天认真聆听谁在耳边低语，它从不大叫。如果你倾听这些悄悄话，并且心绪难宁，这就是你想用余生去做的事情。 你余生就去做此事，我们也会从中受益. 7、Mark Zuckerberg——Get Started 马克·扎克伯格——开始行动几年前，有一些大公司想收购我们，但我并不想卖，我们公司也因此有了分歧。 在一次激烈的争论后，我身边的一个顾问告诉我。如果我现在不出售，余生都会为这个决定后悔。 那时人际关系非常紧张，以至于不到一年管理团队都走光了，那是我创办脸书以来最为困难的时候。 我相信我们所做的一切，却感到孤独。更糟糕的是，错误在我。 我开始怀疑自己是否错了，是否是一个虚张声势，年仅22岁的小孩，根本不了解世界是怎么回事。 现在，几年过去了。我明白了那就是没有更高使命感的后果！我们可以创造它，并一起努力实现它。我最喜欢的故事之一：肯尼迪去拜访美国国家航空航天局时。看见一个扫地的清洁工，便问他在做什么，他回答说：先生，我在帮忙把人送上月球。 使命感就是意识到你是某一个更宏大图景的一部分，你被需要意识到你的前方有更好的值得你奋斗的东西，使命感才能带来真正的快乐。 J.K.罗琳被拒绝了12次之后才出版了哈利波特，即使是碧昂斯也曾创作过数百首曲目才成就《Halo》。 最大的成功往往源自无数的失败。想法并不从一开始就是成熟的，只有你开始付诸实践，他们才会越来越清晰。 你要做的只是现在开始！ 6、J.K Rowling——Failure is Inevatible J.K.罗琳——失败不可避免在我毕业仅仅七年后的日子里，我的失败达到了史诗般空前的规模。 短暂的婚姻闪电般的破裂，我又失业成了一个艰难的单身母亲。除了流浪汉，我是当时英国最穷的人之一。 但年父母和我自己对未来的担忧，现在都变成了现实。 按照惯常的标准来看，我也是我所知道的最失败的人。 现在，我不打算站在这里告诉你们，失败是有趣的，那段日子是我生命中黑暗岁月。 我不知道它是否代表童话故事里需要历经的磨难，更不知道自己还要在黑暗中走多久。 很长一段时间，前面留给我的只是希望，而不是现实。 那么为什么我要谈论失败的好处呢？ 因为失败意味着剥离掉那些不必要的东西，我因此不再伪装自己，远离自我；而重新开始把所有的精力放在对我最重要的事情上。 如果不是没有在其他领域成功过，我可能就不会找到在一个我确信真正属于的舞台上取得成功的决心。 我获得了自由，因为最害怕的虽然已经发生了。但我还活着，我仍然有一个我深爱的女儿，我还有一个旧打字机和一个很大的想法。 所以困境的谷底，成为我重建生活的坚实基础。 你们可能永远没有达到我经历的那种失败程度，但有些失败，在生活中是不可避免的。 生活不可能没有一点失败，除非你生活的万般小心，而那也意味着你没有真正的在生活了。 无论怎样，有些失败还是注定要发生的。失败是使我的内心产生了一种安全感，这是我从考试中没有得到过的。 失败让我看清自己，这也是我同各国其他方式无法体会的。 我发现，我比自己认为的，要有更强的意志和决心。 我还发现，我拥有比宝石更加珍贵的朋友。 从挫折中获得智慧、变得坚强，意味着你比以往任何时候都更有能力生存。 只有在逆境来临的时候，你才会真正认识你自己，了解身边的人。 5、 Oprah Winfrey——You Are Responsible For Your Life 奥普拉·温弗莉——你为自己的人生负责我一直非常理解自己，如果我人生向前走，我知道要自己努力实现。 我知道这是真的，并且可以表述为你为自己的人生负责！ 如果你就干坐着等，期望别人来拯救你，治愈你，甚至帮助你，你就是在浪费时间，因为自由你自己拥有决定人生的能力！ 越早知道这个道理，你的生活就越早开始。这是我通过25年来几千场奥普拉访谈明白的道理。 你的出身并不重要，我见过从贫穷沙漠走出来的人，这些都不重要。 你妈妈是做什么的，是否有博士学历，都不重要。 重要的是此刻，以及你愿意抓住此刻，接受此刻。 忘记过去，开始负责，迈步向前。 4、Will Smith——Fear is an illusion 威尔斯密斯——恐惧是个泡影跳伞前一天晚上，你躺在床上一直吓醒 额～ 你被噩梦吓的不行，一直在重复想象跳下飞机可怕的画面，你就想不明白了干嘛要决定跳伞呢？ 飞机起飞了，一直攀升到了4000米的高空，这个时候有人把舱门打开了。 那一刻我才真正意识到，这辈子还是第一次坐舱门打开的飞机。 教练把我带到了舱门旁，我站在舱门边缘，往下望着我的葬身之地。 然后教练开始喊：“我数到3！1，2……”教练数到2的时候就会把我推下去，因为通常数到3的时候大家就会死命抓住旁边。 然后我就……额！！！我从飞机上往下掉，然后一秒钟后，你会发现这是你这辈子最好的一次体验。 你在空中飞行，感觉不到半点恐惧。 此刻我才了解，当人面对最大的危险时，心中的恐惧反而时最少的。 我从这次经验中学到的就是，为什么你要在跳伞的前一个晚上辗转反侧？ 恐惧什么呢？ 人都还没上飞机啊。在我真的准备往下跳之前，前面的整个过程真的没油必要浪费在恐惧上啊。 这样只会毁掉你一天的心情。 上帝往往将最美好的事物放在了恐惧的另一面，我们内心深处的巨大恐惧背后，往往藏着人生中难得的美好体验。 3、Sylvester Stallone——I had to sell my dog 西尔维斯特·史泰龙——穷到卖狗我不得不把狗卖掉，生活非常不如意。 40美元的车也坏了，我要坐公交上班。 我没有电影背景，没有电影知识，只是跟着直觉走，我觉得这是非常真实的时。 他们说史泰龙，你准备好了吗？我说不，除了洛奇。 我经常要演打斗片或者运动片，他们说，你出场把他们打败，你会赢。 我说，我不会赢，我要让他们打败我。 但是如果我仍旧能够保持清醒，能够站起来，那么生活就没有那么糟了。 而且，在生命结束时，我们仍旧可以说我们从未屈服。 我们被打倒，但是有站起来，我可以说，我渡过了有尊严的一生。 就像歌曲所说，历尽磨难，我还是胜者。我觉得这是一个很好的墓志铭！ 这就是我想在这部电影中体现的精神，更重要的是，我意识到一个人无法成功。 只有找到好的对手，和你一起成长的人，你才会觉得无人可敌。 2、Eric Thomas——There was a young man 埃里克·托马斯——渴望成功的年轻人有一个年轻人想挣很多的钱，他去拜访了一位老人说“我想和你一样成功”。 老人说如果你想和我一样成功，明天早上4点到海滩跟我碰面。 于是年轻人清晨4点就到了海滩，他准备好了一切，西装革履。 老人抓住他的手说，你有多么渴望成功？他说“非常渴望”。 老人说“走到水里”，于是他便走进了水里。当他走到水中时，水已经漫到了腰部，他便想，这个老家伙疯了。我只是想挣钱，他却让我游泳。 于是老人说“你刚才说想成功”，他说“是的”。 老人揪住他的头按在水里，就在年轻人快要昏厥的时候，老人一下把他提起来。 并说“我有一个问题问你”“你刚刚在水下时想做什么？”年轻人说“我想呼吸”。 于是老人说，当你对成功的渴望，就像对呼吸一样强烈时，你一定会成功！ 我今天要告诉你们，首先，你们很大多数人说想成功，你们并不是非常想成功，只是有点想。 你们对成功的渴望没有对派对那样强烈，也没有像渴望变酷那样强烈，你们大多数人不会成功。 因为你们一旦学习累了就会放弃，不要畏缩放弃，勇往直前。 不要畏缩放弃，你已经付出了，受伤了，那么就要从中获得收益！ 1、Dr.Martin Luther King——If you can’t run then walk 马丁·路德·金——如果无法奔跑，那就行走这是你生命中至关重要的时期，因为你现在做什么工作，做什么决定，会极大的决定你生命的方向。 问题就在于，你是否拥有一个明确合理的蓝图，我建议你们把这些事情放进未来蓝图里。 第一件便是坚信自我尊严和价值，别让任何人让你感觉一文不值。一定要相信自己的影响和价值，相信你的生命拥有的终极意义。 第二点是你一定要把追求卓越作为基本原则，在你涉足的不同领域，随着时间的推移，你要决定自己以后做什么，你终身职业是什么。 一旦发现马上去做，并且做好它。 没有人的生命拥有水晶般的阶梯，但时我们要勇往直前，一直前行。 如果无法飞翔，那就奔跑。 如果无法奔跑，那就行走。 如果无法行走，那就爬行。 无论怎样，请不要停止前进。 如果你做不了大树，就做灌木。 如果做不了大道，就做小径。 做不了太阳，就做繁星。 ​因为决定成败的不是大小，而是要做什么都做到最好！]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo使用图片]]></title>
    <url>%2F2017%2F06-19%2Fhexo%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[hexo框架博客使用本地图片；之前尝试的是放入根目录下，再建立起一个upload的文件夹用于存放博客图片，之后发现图片莫名的显示不出，于是重新寻找方法 首先安装hexo插件123npm install hexo-asset-image --save或npm install https://github.com/CodeFalling/hexo-asset-image --save 安装成功之后，在你创建一批文章时会同时创建同名文件夹；只需将图片放入同名文件夹中，之后在文章中引用即可 config中配置打开主题_config.xml配置文件： 123找到：post_asset_folder，将false属性改为post_asset_folder : true 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new test，在source/_posts中会生成文章test.md和同名文件夹test。将图片资源放在test中，文章就可以使用相对路径引用图片资源了。 使用图片hexo 资源文件介绍 markdown的引用方式![](image.jpg) markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示 标签插件语法1&#123;% asset_img image.jpg This is an image %&#125; 该方式可以在首页、文章中显示 还有其他标签： 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; HTML语法1&lt;img src="/image.jpg" width=50% height=50% align=center/&gt; 参考文章： 在hexo中无痛使用本地图片 Hexo框架下给博客插入本地图片 Hexo博客搭建之在文章中插入图片]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中用brew安装Tomcat]]></title>
    <url>%2F2017%2F06-18%2FMac%E4%B8%AD%E7%94%A8brew%E5%AE%89%E8%A3%85Tomcat%2F</url>
    <content type="text"><![CDATA[Tomcat的安装方式有多种，官网下载安装或用其他管理工具安装；本篇内容是用brew软件管理工具安装Tomcat 首先先确认brew命令正常 1brew list 查看已安装软件 如果命令无法正常运行可参照此文安装brew 查看Tomcat相关信息1brew info tomcat 安装Tomcat1brew install tomcat 检查是否安装成功1catalina -h catalina代表Tomcat的服务 1catalina 查看帮助命令 Tomcat的默认端口是8080，如果运行成功可通过http://localhost:8080访问 webapp的根目录(CATALINA_HOME) /usr/local/Cellar/tomcat/8.5.16/libexec/webapps/ROOT/  运行Tomcat1catalina run 停止Ctrl＋C 开启服务1catalina start 停止服务1catalina stop]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac中配置环境变量]]></title>
    <url>%2F2017%2F06-17%2FMac%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[环境变量是每个开发者绕不开的话题，本篇简单讲述Mac中 ~/.bash_profile环境变量的相关 Mac中配置环境变量的位置Mac中配置环境变量的位置主要有以下三个(多的几种看下方加载顺序)： /etc/profile （建议不修改这个文件 ）全局（公有）配置，不管是哪个用户，登录时都会读取该文件 /etc/bashrc （一般在这个文件中添加系统级环境变量）全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件 ~/.bash_profile （一般在这个文件中添加用户级环境变量常用）每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次 OS X系统的环境变量，加载顺序为： 123456789101112131415/etc/profile/etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。~/.bash_profile，~/.bash_login，~/.profile按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的 查看Mac中使用的是什么shell1echo $SHELL shell的种类有： csh或者是tcsh；这几种归类为：C Shell（Mac OS X 10.2之前默认） bash，sh，zsh；这几种归类为：Bourne Shell（Mac OS X 10.3之后默认） shell语言的不同只会是使用规则会有些许差别，有兴趣的童鞋可以进一步探索一下其中差别；文中的方式适用于Bourne Shell ~/.bash_profile配置创建1touch .bash_profile 打开123open -e .bash_profile注：这种是用外部的编辑工具打开编辑，优点是可视化强 直接关闭编辑框就可以保存了，保存后可刷新一下 123vi ~/.bash_profile注：使用vi编辑，优点是无需额外切换窗口 vi常用的命令： 命令 释义 :w 保存 :q 退出vim :wq 保存并退出 :wq! （在可以转换权限的情况下）强制保存并退出 :q! 直接退出不保存 :w filename 另存为filename :n,m w filename 将第n行到第m行另存为filename :set nu 显示行号 :set nonu 不显示行号 :! command 暂时离开vim，并执行command，执行完后再进入vim :r filename 将filename文件的数据读入当前文件 :set all 显示当前vim的环境配置 根据命令编辑，保存； 配置1export PATH=$&#123;PATH&#125;:路径1:路径2 :$PATH （用“：”分割） 如： 12345678910111213export xx1_HOME=/Library/xxx/xxx/xxx/Contents/Homeexport xx2_HOME=/usr/local/xxx/xxxexport xx3__HOME=/Users/xxx/xxxexport PATH=$&#123;PATH&#125;:xx1_HOME/bin: xx2_HOME/tools: xx2_HOME/tools/bin: xx3__HOME/bin:$PATH还可以直接配置export PATH=$PATH:/usr/local/xxx/bin或者export PATH=/usr/local/hbase/bin:"$PATH" 或者： 123export JAVA_HOME=/opt/module/jdk1.8.0_151export PATH=$PATH:$JAVA_HOME/bin 刷新1source ~/.bash_profile 以上就是环境变量的一些简单配置，还有很多有意思的配置，童鞋们可自行探索，欢迎交流、分享]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac的一些配置之Alfred篇]]></title>
    <url>%2F2017%2F06-16%2FMac%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E4%B9%8BAlfred%E7%AF%87%2F</url>
    <content type="text"><![CDATA[本篇中主要内容是Alfred软件的一些配置：自定义web搜索，更改默认搜索，一些Workflows Alfred号称Mac中的效率神器，可根据自己喜好深度自定义 一般配置 首页打开preferences-&gt;General页面中Alfred Hotkey设置使用快捷键where are you 选择你的地区，在使用自带搜索时会搜索到相对应的地区信息 外观 Clipboard（剪切板）设置按键，设置保持时效 自定义web搜索 添加自己常用的网站搜索如github、京东、天猫、知乎等 进入到preferences-&gt;Features－&gt;Web Search 常用的有： 1234567891011121314151617181920百度：https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;wd=&#123;query&#125;简书：http://www.jianshu.com/search?utf8=%E2%9C%93&amp;q=&#123;query&#125;京东：http://search.jd.com/Search?keyword=&#123;query&#125;&amp;enc=utf-8微信文章：http://weixin.sogou.com/weixin?type=2&amp;query=&#123;query&#125;stackoverflow：http://www.stackoverflow.com/search?q=&#123;query&#125;github：https://github.com/search?utf8=%E2%9C%93&amp;q=&#123;query&#125;maven：http://mvnrepository.com/search?q=&#123;query&#125; Workflows自己用的，一个有道，一个是终端相关其他的有知乎上的推荐：Mac效率神器Alfred以及常用Workflow 有哪些经典且好玩的Alfred workflow? 借助 Alfred 2 的 Workflows 功能可以做哪些好玩的事情？ 其他其他功能的展示，web搜索，本地搜索，等灯 搜索功能 计算器 词典 词典 还有许多的功能等你去发现，欢迎交流]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac制作系统安装U盘]]></title>
    <url>%2F2017%2F06-15%2F%E5%88%B6%E4%BD%9CMac-OS-U%E7%9B%98%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[制作Mac OS U盘启动Mac中有时候系统更新会觉得没有自己以前的系统好用，此时不妨试着自己重新安装系统，降级系统；如果你之前有对系统备份，那就不需要重新安装。如果没有，哪只能重新安装系统 首先下载你所想的历史版本系统 通常经过AppStore更新的，会在已购列表中找到记录；找到以后可以直接下载，再到应用程序中栏目去寻找。如果没有则需要到网上搜索。 通过命令刻录U盘 请使用大于4G的U盘，或者移动硬盘的分区。 打开你的终端输入以下命令：[ —volume /Volumes/MacOS (MacOS 是你的移动硬盘名字)] 1sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MacOS --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app 如提示如上图，则说明刻录成功 安装系统从U盘启动系统 重启电脑，开机时按住option键不放，直到进入磁盘选择界面，选择你自己的磁盘 之后会进入一个界面，有“通过Time Machine恢复”，“安装OS X”等选项，此时你有两个选择 （1）. 通过菜单栏的磁盘工具抹掉系统硬盘，磁盘工具的使用和制作U盘启动时一样，将系统盘抹掉，格式化为Mac OS扩展格式。然后选择“安装OS X”，将系统安装到抹掉的硬盘里。此种方式会删除所有数据 （2）. 直接点击“安装Os X”，将U盘里的系统安装到系统盘上，这种方式是覆盖安装，只会替换系统文件，用户文件还在 以上几种方式分别对应不同的场景需求，最简单也最保险的当然是通过Time Machine备份系统，所以在此也提醒各位在升级系统前一定要备份，否则你将尝到无尽折腾的味道。另外，由于Time Machine无法选择部分文件备份，觉得备份太慢且只想备份部分文件或软件时，可以自己用移动硬盘拷贝，由于Mac下的软件都类似于Windows下的绿色软件，也就是说你将/Applications目录下的软件考走，放到另一台Mac的/Applications目录下，一样是可以运行的（除了少部分要依赖系统文件的软件），所以你可以像拷贝文件一样将软件拷贝到移动硬盘，重装系统后再将软件拷贝到/Applications下即可，这种方式经本人试验大部分软件都可用。]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio for Mac常用快捷键]]></title>
    <url>%2F2017%2F06-13%2FAndroidStudio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[Android Studio for Mac 常用快捷键 Android Studio官网 下载分为以下4个版本：Canary,Dev,Beta,Stable；稳定性从左到右依次提高，更新频率依次降低 ⌥—&gt; option|alt⇧—&gt;shift⌃—&gt;control⌘—&gt;command 常用的快捷键（Mac OS X 10.5+版） 功能类 快捷键 描述 F1 Quick Documentation 打开方法类等的文档 F2 Next Highlighted Error 顺序快速定位高亮错误 Shift + F2 Previous Highlighted Eorror 逆序快速定位高亮错误 F3 Toggle Bookmark（添加/移除书签） Command + F3 Show Bookmarks（打开书签对话框） F4 Jump to Source(跳转到源码) F5 Copy.. (复制当前文件) F6 Move.. (移动当前文件) F7 Step Into（debug时跳进方法内部） F8 Step Over（debug时跳到下一行） Command ⌘ 快捷键 描述 Command + , Preferences… （打开开发工具设置界面） Command + Delete Delete Line（删除行） Command + D Duplicate Line or Block（复制行或者代码块） Command + W Close active editor tab （关闭激活的页签） Command + P Parameter Info（方法参数提示） Command + Q Exit（退出开发工具） Command + K Check In Project（展示本地改动及提交代码） Command + T Update Project （更新代码） Command + B Declaration（跳转到方法、类、字段等的声明） Command + F Find…（查找文本） Command + R Replace…（替换文本） Command + = Expand（展开代码） Command + - Collapse（折叠代码） Command + E Recent Files（最近打开的文件） Command + O Class…（查找类） Command + N Generate… (生成代码) Command + J Insert Live Template…（自动生成模版代码） Command + L Line… (跳转到指定行) Command + / Comment/uncomment with line comment （行注释） Command + F9 Make project (构建项目) Command + Alt + / Comment/uncomment with block comment （块注释） Command + Alt + M Extract Method （导出方法） Command + Alt + V Extract Variable （导出变量） Command + Alt + F Extract Field （导出字段） Command + Alt + C Extract Constant （导出常量） Command + Alt + L Reformat Code…（格式化代码） Command + Alt + T Surround with… (if..else, try..catch, for, synchronized, etc.) （包括代码块生成） Alt + F7 Find usages （查找引用） Command + Alt + F7 Show usages （展示引用下拉框） Command + Shift + O Go to File（跳转到文件） Command + Shift + U Toggle case for word at caret or selected block （切换选中的单词或者代码块的大小写） Double Shift Search everywhere （搜索工程中的任何位置的文件） Shift + F6 Rename…（重命名） Command + F6 Change Signature （更改方法签名） Control ⌃ 快捷键 描述 Control + O Override methods （覆盖父类的方法） Control + I Implement methods (实现接口的方法) Control + R Run (运行程序到设备) Control + D Dubug (debug程序到设备) Control + H Type hierarchy (查看类的层级结构) Control + Alt + O Optimize imports (优化导包／清除无用包) Control + Shift + J Join Lines 将代码合成一行(可配合格式化代码使用) Option|alt ⌥ 快捷键 描述 Option + Shift + UP/Down Move Line Up/Down(移动代码上下) Option + Command + L Reformat Code 格式化代码 Android studio 是在IntelliJIDEA开发而来的，许多的设计、日常规范都遵从IntelliJIDEA；熟悉IntelliJIDEA的同学很容易上手 以上的只是一部分，后续有时间补上]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android相关网站]]></title>
    <url>%2F2017%2F06-12%2FAndroid%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[Android相关网站Android官网 掘金 eoeAndroid社区伯乐在线 有个相亲频道，单身的同学可以看看有没有合适的 Android开发技术周报 AndroiddevTools 用常用的Android开发工具 程序员修炼 又许多个人成长经验的分析 Android源码 Google开发社区Android栏目 Android 开源项目集合 Android开发工具汇总 博客android-dev-cn 国内常用的博客汇总 android-dev-com 国外常用的博客汇总 其它Android开发之旅：书籍、教程、工具和各种干货！ Android学习之路]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用软件]]></title>
    <url>%2F2017%2F06-11%2FMac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Mac常用的软件及一些配置每个人都有不同的电脑使用习惯，记录一下自己常用的软件以及一些配置 个人常用的一些软件 网易云音乐／QQ音乐 微信 QQ foxmail Chrome 浏览器 印象笔记／有道云笔记 Shadowsocks vpn Alfred 必备利器 iterm2 terminal的替代 homebrew 软件管理工具，可命令下载软件 Mou／MacDown／Typora markdown几款免费的文本编辑器 Atom 文本编辑器可高度自定义，具体可看官网，也支持markdown写作 个人的一些配置安装homebrew打开terminal(终端),输入以下命令安装 homebrew 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 卸载homebrew 1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)" 安装homebrew－cask12brew install caskroom/cask/brew-caskbrew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup // 更新 用homebrew／homebrew－cask安装软件12345brew cask install google-chrome // 安装 Google 浏览器brew cask/ install 软件名安装前可以先查看一下是否有该软件brew cask info 软件名brew cask uninstall 软件名 卸载 还有其它的一些命令，具体可以看帮助 这只介绍了简单的一些软件，以及一些配置；还有很多的软件需要自己去探索如：iterm、Alfred、Atom]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Charles抓取移动设备Https请求(Mac环境中)]]></title>
    <url>%2F2017%2F06-10%2FCharles%E6%8A%93%E5%8F%96%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87Https%E8%AF%B7%E6%B1%82-Mac%E7%8E%AF%E5%A2%83%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[随着Https的普及；Charles对Https请求抓取数据也越来越多 Charles是一款抓包神器，它是Java开发的跨平台的软件，不仅可以在Mac上使用，Linux以及Window下都是可以使用的，当然需要安装JDK,才能运行，他是收费的,也可免费,只是每过一小段时间,就会弹出一个对话框提醒注册缴费。此处不讲述软件安装，注册 Charles使用Charles抓取Http数据首先打开软件页面： 打开Charles，在Menu选择Proxy &gt; Proxy settings进入页面设置； Proxies页面中的Http Proxy，Port框中可以根据自己实际情况修改端口号，后面在手机中设置Http代理的时候会用到。 选macOS页面，在Enable macOS打勾，在Use Http proxy打勾 选择OK保存，电脑端的就设置好了 手机端，确保手机、电脑连接的是同一个局域网。 打开手机连接的wifi，在Http代理中选择手动代理填写ip，端口 ip查看使用软件中的IP地址，端口是上面第二选项中设置的端口号 抓包设置就好了，记得在Charles软件中选择允许抓取数据 Charles抓取Https数据抓取Https数据包，电脑与移动端都需要安装证书(可以先尝试一下移动端不安装，如果无法抓取再安装)； Mac安装证书 打开Charles，在Menu选择Help &gt; Install Charles CA SSL Certificate 打开Keychain Access（钥匙访问串），点击左边登陆选项找到Charles Proxy CA，此时证书是不被信任的；双击进去，打开信任，将不信任改为信任 打开Charles，在Menu选择Proxy &gt; SSL Proxying Settings &gt; SSL Proxying 点击Add添加一个地址，在Host中填写英文字符*再保存此时电脑端的证书安装完毕 手机安装证书 打开Charles，在Menu选择SSL Proxying &gt; Install Charles Root Certificate on a Mobile Device or Remote Browser；点击之后会出现一个提示框其中的IP地址每个人都不一样，到时候配置代理时需要使用你自己的IP 用手机浏览器打开http://charlesproxy.com/getssl 下载证书，再根据提示操作 再配置好HTTP代理，大功告成 注：如果没有抓取到数据，请注意检查是否连接同一个局域网，IP地址是否填写正确，端口是否正确以及是否允许抓取数据]]></content>
      <categories>
        <category>Charles</category>
      </categories>
      <tags>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL常用命令(4)]]></title>
    <url>%2F2017%2F06-09%2FSQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-4%2F</url>
    <content type="text"><![CDATA[SQL常用的命令(查询－多表)先创建两个表albums(artist_id,name)artist_id是外键,专辑表、artists(id,name,year)id是主键，艺术家表 一个外键是包含其它表的数据库中的主键列。我们使用外键和主键来连接两个不同表中的行。一个表的外键保存另一个表的主键的值。与主键不同，外键不需要是唯一的，可以是NULL。 查询12SELECT * FROM albums WHERE artist_id = 3;SELECT * FROM artists WHERE id = 3; 这里artist_id是albums表中的外键。我们可以看到迈克尔·杰克逊id在artists表中有3个。迈克尔·杰克逊的所有专辑也在表中的artist_id列中有3张albums。 这是SQL在两个表之间链接数据的方式。在关系之间artists表和albums表是id艺术家的价值。 查询1SELECT albums.name, albums.year, artists.name FROM albums, artists; 查询多个表的一种方法是写一个SELECT多个表名用逗号分隔的语句。这也被称为交叉连接。在这里，albums并且artists是我们正在查询不同的表。 当查询多个表时，列名需要指定table_name.column_name。这里，结果集包括表中的列name和year列和albums表中的name列artists。 不幸的是，这个交叉连接的结果并不是很有用。它将artists表的每一行与表的每一行组合albums。只能组合艺术家创建相册的行更有用。 查询(JOIN)1SELECT * FROM albums JOIN artists ON albums.artist_id = artists.id; 在SQL中，连接用于组合来自两个或多个表的行。SQL中最常见的连接类型是内部连接。如果连接条件为true，内连接将组合来自不同表的行。让我们看看语法，看看它是如何工作的。SELECT *指定我们的结果集将具有的列。在这里，我们希望在两个表中都包含每一列。FROM albums 指定我们正在查询的第一个表。JOIN artists ON指定要使用的连接类型以及第二个表的名称。在这里，我们要做一个内部连接，我们要查询的第二个表artists。albums.artist_id = artists.id是描述两个表如何相互关联的连接条件。在这里，SQL使用表中的外键列artist_id将albums其与列中与列中artists相同值的恰好一行匹配id。我们知道，它只会在比赛中一排artists表，因为id是PRIMARY KEY的artists。 查询(LEFT JOIN)1SELECT * FROM albums LEFT JOIN artists ON albums.artist_id = artists.id; 外连接也可以组合来自两个或多个表的行，但与内部连接不同，它们不需要满足连接条件。相反，左侧表格中的每一行都会返回到结果集中，如果不符合连接条件，则使用NULL值来从右侧表格中填入列。 左表仅仅是语句中出现的第一个表。在这里，左边的表是albums。同样，右表是出现的第二个表。在这里，artists是正确的表。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git添加账号]]></title>
    <url>%2F2017%2F06-08%2FGit%E6%B7%BB%E5%8A%A0%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[Git添加账号测试SSH是否连接打开Terminal 1ssh -T git@github.com 以下反馈则表示账号连接成功，可以直接使用。如果是其它的则需要在你的git添加SSH key 12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 先查看电脑是否存在SSH key 有则直接在您的GitHub账号中添加，没有则现在您的电脑中先创建再添加检查电脑中是否存在SSH keys 1ls -al ~/.ssh 如果存在，则会显示id_dsa.pub、id_dsa等相关显示；不存在则需要先创建SSH keys 创建SSH key12ssh-keygen -t rsa -C "your_email@youremail.com" 注：your_email@youremail.com 请注意替换您自己的GitHub 账号 再根据命令的提示操作 1Generating public/private rsa key pair. Enter file in which to save thekeys (/Users/your_user_directory/.ssh/id_rsa): //这里需要按下 enter 键就好 按下enter之后，又会出现下面的提示： 12Enter passphrase(empty for no passphrase):提示输入一个类似于密码的自定义的通行证号，如果直接回车则为空 此时会再出现一个密码的二次确认（请注意设置容易记住的，后面在测试连接时需要用到） 如果再二次确认中忘记了刚刚设置的密码，可以重新再生成一个新的SSH key 之后出现的一大堆提示则说明您的SSH key创建成功 在你的GitHub中添加SSH key验证先打开您生成的id_dsa.pub，拷贝SSH值。可以直接找到.ssh文件夹打开拷贝，也可以选择用命令 1pbcopy &lt; ~/.ssh/id_rsa.pub 再登录你的Github账号，在Settings－&gt;SSH and GPG keys-&gt;选项中添加按照提示讲拷贝的SSH添入其中，提交后会有输入密码的确认，之后会有提示。如果提示添加成功，可以测试一下是否可以理解，参照“测试SSH是否与您的账号连接”]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL常用命令(3)]]></title>
    <url>%2F2017%2F06-07%2FSQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-3%2F</url>
    <content type="text"><![CDATA[摘要12345678聚合函数将多个行组合在一起以形成更有意义的信息的单个值。COUNT以列的名称作为参数，并计算值不为的行数NULL。GROUP BY 是一个用于聚合函数的子句，用于组合一个或多个列的数据。SUM() 将列名称作为参数，并返回该列中所有值的总和。MAX() 将列名作为参数，并返回该列中的最大值。MIN() 将列名作为参数，并返回该列中的最小值。AVG() 以列名称作为参数，并返回该列的平均值。ROUND()需要两个参数，列名和小数位数来舍入该列中的值。 高级查询 查询(COUNT)1SELECT COUNT(*) FROM fake_apps; COUNT()是将列的名称作为参数的函数，并计算列不是的行数NULL。在这里，我们想计算每一行，所以我们*作为一个参数传递。 查询(GROUP BY)1SELECT price, COUNT(*) FROM fake_apps GROUP BY price; GROUP BY是SQL中仅用于聚合函数的子句。它与SELECT声明协作使用，将相同的数据安排成组。 在这里，我们的聚合函数是COUNT()和我们price作为参数传递GROUP BY。SQL会计算price表中每个应用程序的总数。 通常对SELECT您作为参数传递的列有帮助GROUP BY。在这里我们选择price和COUNT(*)。您可以看到结果集合分为两列，可以轻松查看每个价格的应用数量。 查询(SUM)1SELECT SUM(downloads) FROM fake_apps; SUM()是一个将列的名称作为参数并返回该列中所有值的总和的函数。在这里，它会添加downloads列中的所有值。 查询(MAX)1SELECT MAX(downloads) FROM fake_apps; MAX()是一个将列的名称作为参数并返回该列中最大值的函数。在这里，我们传递downloads一个参数，所以它将返回downloads列中最大的值。 查询(MIN)1SELECT MIN(downloads) FROM fake_apps; 类似于MAX()SQL，也可以通过使用MIN()函数来简单地返回列中的最小值。 MIN()是将列的名称作为参数的函数，并返回该列中的最小值。在这里，我们传递downloads一个参数，这样它将返回downloads列中最小的值 查询(AVG)1SELECT AVG(downloads) FROM fake_apps; 此语句返回数据库中应用程序的平均下载次数。SQL使用该AVG()函数快速计算特定列的平均值。 该AVG()函数的作用是将列名作为参数，并返回该列的平均值。 查询(ROUND)12ELECT price, ROUND(AVG(downloads), 2) FROM fake_appsGROUP BY price; 默认情况下，SQL尝试尽可能精确地进行舍入。我们可以使用该ROUND()功能使结果集更容易阅读。 ROUND()是一个使用列名称和整数作为参数的函数。它将列中的值舍入为整数指定的小数位数。在这里，我们传递列AVG(downloads)和2作为参数。SQL首先计算每个价格的平均值，然后将结果舍入到结果集中的两位小数。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL常用命令(2)]]></title>
    <url>%2F2017%2F06-06%2FSQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2%2F</url>
    <content type="text"><![CDATA[摘要 SELECT 是您每次要从数据库查询信息时使用的子句。 WHERE 是一个流行的命令，可以根据您指定的条件过滤查询的结果。 LIKE并且BETWEEN是可以在一个WHERE子句中使用的特殊操作符 AND并且OR是可以用于WHERE在两个或多个条件下过滤查询的特殊操作符。 ORDER BY 允许您以升序或降序对查询的结果进行排序。 LIMIT允许您指定查询将返回的最大行数。这对于具有数千甚至数百万行的大型表格尤其重要。 在表格中添加新列 1ALTER TABLE celebs ADD COLUME twitter_handle text; 该ALTER TABLE语句向表中添加了一个新列。当您要向表中添加列时，可以使用此命令。 ALTER TABLE是一个允许您进行指定更改的子句。 celebs是正在更改的表的名称。 ADD COLUMN是一个允许您向表添加新列的子句。 twitter_handle 是要添加的新列的名称TEXT 是新列的数据类型 高级查询查询(DISTINCT)1SELECT DISTINCT genre FROM movies; SELECT DISTINCT用于返回结果集中的唯一值。它会滤除所有重复的值。在这里，结果集列出了movies表中的每个类型一次。 SELECT DISTINCT指定该语句将是一个返回指定列中唯一值的查询 genre是要在结果集中显示的列的名称。 FROM movies表示要查询的表名。 过滤查询过滤查询的结果是SQL中的一个重要技能。在数据被过滤之后，电影可以看到不同的可能类型更容易，而不是扫描表中的每一行 1SELECT * FROM movies WHERE imdb_rating &gt; 8; 此语句将结果集过滤到仅包含IMDb等级大于8的电影。它如何工作？ WHERE是一个子句，表示您要过滤结果集以仅包含以下条件为真的行。 imdb_rating &gt; 8是过滤结果集的条件。这里，只有列中值大于8的imdb_rating行才会返回到结果集中。 运算符创建一个可以被评估为true或false的条件。与该WHERE子句一起使用的常用运算符是： 123456= 等于!= 不等于&gt; 大于&lt; 少于&gt;= 大于或等于&lt;= 小于或等于 查询(LIKE)1SELECT * FROM movies HERE name LIKE 'Se_en'; LIKE当你想比较类似的值时，可以是一个有用的操作符。在这里，我们正在比较两部名称相同但拼写不一的电影。 1231. LIKE是与WHERE子句一起使用的特殊操作符，用于搜索列中的特定模式。2. name LIKE Se_en是评估name特定模式的列的条件。3. Se_en表示具有通配符的模式。这种_方式可以在这里替代任何个人的角色，而不会破坏模式。名称Seven和Se7en两者匹配这种模式。 查询(%)%是可以使用的另一个通配符LIKE1SELECT * FROM movies WHERE name LIKE 'A%'; % 是一个通配符，在该模式中匹配零个或多个缺失的字母。A% 匹配所有电影，其名称以“A”开头%a 匹配以“a”结尾的所有电影%a% 匹配所有中间包含‘a’的电影 查询(BETWEEN)1SELECT * FROM movies WHERE name BETWEEN 'A'and 'J'; 此语句将结果集过滤到仅包含以name“A”字母开头但不包括“J”的s的电影。 1SELECT * FROM movies WHERE year BETWEEN 1990 AND 2000; 在这个陈述中，BETWEEN运营商被用来过滤结果集，只包括year1990年至2000年之间的电影。 查询(AND)1SELECT * FROM movies WHERE year BETWEEN 1990 and 2000 AND genre = 'comedy'; 有时你想在一个WHERE子句中组合多个条件，使结果集更加具体和有用。这样做的一个方法是使用AND操作符。 year BETWEEN 1990 and 2000是该WHERE条款的第一个条件。 AND genre = ‘comedy’是该WHERE条款中的第二个条件。 AND是组合两个条件的运算符。对于要包含在结果集中的行，两个条件都必须为true。在这里，我们使用AND操作员只返回1990年至2000年期间也是喜剧的电影。 查询(OR)1SELECT * FROM movies WHERE genre = 'comedy' OR year &lt; 1980; 该OR运营商还可以使用一个以上条件的组合中的WHERE条款。所述OR操作者将分别评估每个条件，并且如果任何一个条件都为真，则该行被添加到结果集。 WHERE genre = ‘comedy’是该WHERE条款的第一个条件。 OR year &lt; 1980是该WHERE条款中的第二个条件。 OR是将结果集过滤到仅包含条件为真的行的操作符。在这里，我们回来有一种喜剧类型的电影或1980年以前发行的电影。 查询(ORDER BY, DESC, ASC)1SELECT * FROM movies ORDER BY imdb_rating DESC; 您可以使用查询结果排序ORDER BY。对结果进行排序通常会使数据更有用和更易于分析。 ORDER BY是一个子句，表示您想按字母顺序或数字排列特定列的结果集。 imdb_rating是要排序的列的名称。 DESC是SQL中的一个关键字，用于ORDER BY按照降序（从高到低或ZA）排序结果。在这里，它按照IMDb评级将所有电影从最高到最低。 也可以按升序对结果进行排序。ASC是SQL中的一个关键字，用于ORDER BY按升序排列结果（从低到高或AZ）。 1SELECT * FROM movies ORDER BY imdb_rating ASC; 查询(LIMIT)1SELECT * FROM movies ORDER BY imdb_rating DESC LIMIT 3; 有时甚至过滤的结果可以在大数据库中返回数千行。在这些情况下，重要的是将结果集中的行数加起来。 LIMIT是一个允许您指定结果集将具有的最大行数的子句。在这里，我们指定结果集不能有三行以上。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL常用命令(1)]]></title>
    <url>%2F2017%2F06-05%2FSQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1%2F</url>
    <content type="text"><![CDATA[SQL常用的命令记录下来方便复习、回忆，很多的东西许久不用就会慢慢的遗忘掉 SQL操作的类型就几种归纳起来就四个字：增、删、改、查 增：添加数据，关键词insert 删：删除数据，关键词delete 改：修改数据，关键词update 查：查询数据，关键词select 注：通SQL命令的关键字都是大写，这里方便阅读都小写 创建表格首先的命令是创建一个表格： 1CREATE TABLE celebs(id INTEGER,name TEXT,age INTEGER); 创建一个名人的数据表格，它有着三个字段id，姓名，年龄；其中integer，text是字段类型（integer表示的是数字，text表示是文字） 添加数据1INSERT INTO celebs(id,name,age) values(1,'Justin Bieber',21); INSERT INTO是添加指定行或行的子句。 celebs是添加行的表的名称。 (id, name, age)是标识数据插入列的参数。 VALUES是表示插入数据的子句。(1, ‘Justin Bieber’, 21)是标识要插入的值的参数。1是一个将被插入id列的整数‘Justin Bieber’是将被插入name列的文本21是一个将被插入age列的整数 查询表格查询表格中name字段的数据 1SELECT name FROM celebs; SELECT语句用于从数据库中获取数据。在这里，SELECT返回表中name列的所有数据celebs。 SELECT是一个表示该语句是查询的子句。SELECT每次从数据库查询数据时，都将使用它。 name指定查询数据的列。 FROM celebs指定查询数据的表的名称。在此语句中，从celebs表中查询数据。 还可以查询表中所有列的数据(*通配符代表所有表格中的字段) 1SELECT * FROM celebs; 修改数据1UPDATE celebs SET age=21 WHERE id=1; 该UPDATE语句在表格中编辑一行。您可以UPDATE在要更改现有记录时使用该语句。 UPDATE是一个在表中编辑一行的子句。 celebs是表的名称。 SET是表示要编辑的列的子句。age 是要更新的列的名称22是要插入age列的新值。 WHERE是一个子句，用于指示使用新列值更新的行。这里用一个行1的id列是将有行age更新22。 删除数据1DELETE FROM celebs WHERE id=1; 该DELETE FROM语句从表中删除一行或多行。您可以在要删除现有记录时使用该语句。 DELETE FROM 是一个允许您从表中删除行的子句。celebs 是我们要删除行的表的名称。WHERE是一个允许您选择要删除哪些行的子句。这里我们要删除id列中数值为1的那一行。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
